// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 查询用户分组下的 IAM 子账户列表
package get_group_users

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Alias       string                          // 用户分组别名
	Page        int64                           // 分页页号，从 1 开始，默认 1
	PageSize    int64                           // 分页大小，默认 20，最大 2000
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	Data GetGroupIamUsersData // 用户分组下的 IAM 子账号信息
}

// 返回的用户分组下的 IAM 子账号
type GroupIamUser struct {
	Id            string // 记录 ID
	RootUid       int64  // 根用户 uid
	Iuid          int64  // 子账号 uid
	Alias         string // 子账号别名
	CreatedAt     string // 子账号创建时间
	UpdatedAt     string // 子账号上次更新时间
	LastLoginTime string // 子账号上次更新时间
	Enabled       bool   // 子账号是否启用
}
type jsonGroupIamUser struct {
	Id            string `json:"id"`              // 记录 ID
	RootUid       int64  `json:"root_uid"`        // 根用户 uid
	Iuid          int64  `json:"iuid"`            // 子账号 uid
	Alias         string `json:"alias"`           // 子账号别名
	CreatedAt     string `json:"created_at"`      // 子账号创建时间
	UpdatedAt     string `json:"updated_at"`      // 子账号上次更新时间
	LastLoginTime string `json:"last_login_time"` // 子账号上次更新时间
	Enabled       bool   `json:"enabled"`         // 子账号是否启用
}

func (j *GroupIamUser) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonGroupIamUser{Id: j.Id, RootUid: j.RootUid, Iuid: j.Iuid, Alias: j.Alias, CreatedAt: j.CreatedAt, UpdatedAt: j.UpdatedAt, LastLoginTime: j.LastLoginTime, Enabled: j.Enabled})
}
func (j *GroupIamUser) UnmarshalJSON(data []byte) error {
	var nj jsonGroupIamUser
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Id = nj.Id
	j.RootUid = nj.RootUid
	j.Iuid = nj.Iuid
	j.Alias = nj.Alias
	j.CreatedAt = nj.CreatedAt
	j.UpdatedAt = nj.UpdatedAt
	j.LastLoginTime = nj.LastLoginTime
	j.Enabled = nj.Enabled
	return nil
}
func (j *GroupIamUser) validate() error {
	if j.Id == "" {
		return errors.MissingRequiredFieldError{Name: "Id"}
	}
	if j.RootUid == 0 {
		return errors.MissingRequiredFieldError{Name: "RootUid"}
	}
	if j.Iuid == 0 {
		return errors.MissingRequiredFieldError{Name: "Iuid"}
	}
	if j.Alias == "" {
		return errors.MissingRequiredFieldError{Name: "Alias"}
	}
	if j.CreatedAt == "" {
		return errors.MissingRequiredFieldError{Name: "CreatedAt"}
	}
	if j.UpdatedAt == "" {
		return errors.MissingRequiredFieldError{Name: "UpdatedAt"}
	}
	if j.LastLoginTime == "" {
		return errors.MissingRequiredFieldError{Name: "LastLoginTime"}
	}
	return nil
}

// 返回的用户分组下的 IAM 子账号列表
type GetGroupIamUsers = []GroupIamUser

// 用户分组下的 IAM 子账号信息
type Data struct {
	Count int64            // 用户分组下的 IAM 子账号数量
	List  GetGroupIamUsers // 用户分组下的 IAM 子账号列表
}

// 返回的用户分组下的 IAM 子账号列表信息
type GetGroupIamUsersData = Data
type jsonData struct {
	Count int64            `json:"count"` // 用户分组下的 IAM 子账号数量
	List  GetGroupIamUsers `json:"list"`  // 用户分组下的 IAM 子账号列表
}

func (j *Data) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonData{Count: j.Count, List: j.List})
}
func (j *Data) UnmarshalJSON(data []byte) error {
	var nj jsonData
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Count = nj.Count
	j.List = nj.List
	return nil
}
func (j *Data) validate() error {
	if j.Count == 0 {
		return errors.MissingRequiredFieldError{Name: "Count"}
	}
	if len(j.List) == 0 {
		return errors.MissingRequiredFieldError{Name: "List"}
	}
	for _, value := range j.List {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}

// 返回的用户分组下的 IAM 子账号列表响应
type GetGroupIamUsersResp = Response
type jsonResponse struct {
	Data GetGroupIamUsersData `json:"data"` // 用户分组下的 IAM 子账号信息
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Data: j.Data})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Data = nj.Data
	return nil
}
func (j *Response) validate() error {
	if err := j.Data.validate(); err != nil {
		return err
	}
	return nil
}
