// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 创建 IAM 子账号密钥
package create_user_keypairs

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Alias       string                          // 子账号别名
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	Data CreatedIamUserKeyPairData // IAM 子账号密钥信息
}

// IAM 子账号密钥信息
type Data struct {
	Id        string // 记录 ID
	AccessKey string // IAM 子账号 Access Key
	SecretKey string // IAM 子账号 Secret Key
	UserId    string // 关联用户的记录 ID
	CreatedAt string // 密钥创建时间
	Enabled   bool   // 密钥是否启用
}

// 返回的 IAM 子账号密钥信息
type CreatedIamUserKeyPairData = Data
type jsonData struct {
	Id        string `json:"id"`         // 记录 ID
	AccessKey string `json:"access_key"` // IAM 子账号 Access Key
	SecretKey string `json:"secret_key"` // IAM 子账号 Secret Key
	UserId    string `json:"user_id"`    // 关联用户的记录 ID
	CreatedAt string `json:"created_at"` // 密钥创建时间
	Enabled   bool   `json:"enabled"`    // 密钥是否启用
}

func (j *Data) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonData{Id: j.Id, AccessKey: j.AccessKey, SecretKey: j.SecretKey, UserId: j.UserId, CreatedAt: j.CreatedAt, Enabled: j.Enabled})
}
func (j *Data) UnmarshalJSON(data []byte) error {
	var nj jsonData
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Id = nj.Id
	j.AccessKey = nj.AccessKey
	j.SecretKey = nj.SecretKey
	j.UserId = nj.UserId
	j.CreatedAt = nj.CreatedAt
	j.Enabled = nj.Enabled
	return nil
}
func (j *Data) validate() error {
	if j.Id == "" {
		return errors.MissingRequiredFieldError{Name: "Id"}
	}
	if j.AccessKey == "" {
		return errors.MissingRequiredFieldError{Name: "AccessKey"}
	}
	if j.SecretKey == "" {
		return errors.MissingRequiredFieldError{Name: "SecretKey"}
	}
	if j.UserId == "" {
		return errors.MissingRequiredFieldError{Name: "UserId"}
	}
	if j.CreatedAt == "" {
		return errors.MissingRequiredFieldError{Name: "CreatedAt"}
	}
	return nil
}

// 返回的 IAM 子账号密钥响应
type CreatedIamUserKeyPairResp = Response
type jsonResponse struct {
	Data CreatedIamUserKeyPairData `json:"data"` // IAM 子账号密钥信息
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Data: j.Data})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Data = nj.Data
	return nil
}
func (j *Response) validate() error {
	if err := j.Data.validate(); err != nil {
		return err
	}
	return nil
}
