// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 修改授权策略
package modify_policy

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Alias       string                          // 授权策略别名
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
	NewAlias    string                          // 授权策略别名，由 `A-Za-z0-9` 组成
	Description string                          // 授权策略描述
	Statement   ModifyStatements                // 授权策略规则集合
}

// 授权策略规则的操作集合
type ModifyActions = []string

// 授权策略规则的资源集合
type ModifyResources = []string

// 授权策略规则
type ModifyStatement struct {
	Actions   ModifyActions   // 授权策略规则的操作集合，action 查询参考 action 接口，格式为 service/action_alias
	Resources ModifyResources // 授权策略规则的资源集合，格式为 qrn:product:region:uid:[resource-type/]resource-id ；可以简写为 qrn:product:::resource-id
	Effect    string          // 授权策略规则的生效类型，允许访问或拒绝访问
}
type jsonModifyStatement struct {
	Actions   ModifyActions   `json:"action"`   // 授权策略规则的操作集合，action 查询参考 action 接口，格式为 service/action_alias
	Resources ModifyResources `json:"resource"` // 授权策略规则的资源集合，格式为 qrn:product:region:uid:[resource-type/]resource-id ；可以简写为 qrn:product:::resource-id
	Effect    string          `json:"effect"`   // 授权策略规则的生效类型，允许访问或拒绝访问
}

func (j *ModifyStatement) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonModifyStatement{Actions: j.Actions, Resources: j.Resources, Effect: j.Effect})
}
func (j *ModifyStatement) UnmarshalJSON(data []byte) error {
	var nj jsonModifyStatement
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Actions = nj.Actions
	j.Resources = nj.Resources
	j.Effect = nj.Effect
	return nil
}
func (j *ModifyStatement) validate() error {
	if len(j.Actions) == 0 {
		return errors.MissingRequiredFieldError{Name: "Actions"}
	}
	if len(j.Resources) == 0 {
		return errors.MissingRequiredFieldError{Name: "Resources"}
	}
	if j.Effect == "" {
		return errors.MissingRequiredFieldError{Name: "Effect"}
	}
	return nil
}

// 授权策略规则集合
type ModifyStatements = []ModifyStatement

// 修改授权策略参数
type ModifyPolicyParam = Request
type jsonRequest struct {
	NewAlias    string           `json:"alias,omitempty"`       // 授权策略别名，由 `A-Za-z0-9` 组成
	Description string           `json:"description,omitempty"` // 授权策略描述
	Statement   ModifyStatements `json:"statement,omitempty"`   // 授权策略规则集合
}

func (j *Request) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonRequest{NewAlias: j.NewAlias, Description: j.Description, Statement: j.Statement})
}
func (j *Request) UnmarshalJSON(data []byte) error {
	var nj jsonRequest
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.NewAlias = nj.NewAlias
	j.Description = nj.Description
	j.Statement = nj.Statement
	return nil
}
func (j *Request) validate() error {
	return nil
}

// 获取 API 所用的响应
type Response struct {
	Data ModifiedPolicyData // 授权策略信息
}

// 授权策略规则的操作集合
type ModifiedActions = []string

// 授权策略规则的资源集合
type ModifiedResources = []string

// 授权策略规则
type ModifiedStatement struct {
	Actions   ModifiedActions   // 授权策略规则的操作集合
	Resources ModifiedResources // 授权策略规则的资源集合
	Effect    string            // 授权策略规则的生效类型，允许访问或拒绝访问
}
type jsonModifiedStatement struct {
	Actions   ModifiedActions   `json:"action"`   // 授权策略规则的操作集合
	Resources ModifiedResources `json:"resource"` // 授权策略规则的资源集合
	Effect    string            `json:"effect"`   // 授权策略规则的生效类型，允许访问或拒绝访问
}

func (j *ModifiedStatement) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonModifiedStatement{Actions: j.Actions, Resources: j.Resources, Effect: j.Effect})
}
func (j *ModifiedStatement) UnmarshalJSON(data []byte) error {
	var nj jsonModifiedStatement
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Actions = nj.Actions
	j.Resources = nj.Resources
	j.Effect = nj.Effect
	return nil
}
func (j *ModifiedStatement) validate() error {
	if len(j.Actions) == 0 {
		return errors.MissingRequiredFieldError{Name: "Actions"}
	}
	if len(j.Resources) == 0 {
		return errors.MissingRequiredFieldError{Name: "Resources"}
	}
	if j.Effect == "" {
		return errors.MissingRequiredFieldError{Name: "Effect"}
	}
	return nil
}

// 授权策略规则集合
type ModifiedStatements = []ModifiedStatement

// 授权策略信息
type Data struct {
	Id          string             // 记录 ID
	RootUid     int64              // 根用户 uid
	Alias       string             // 授权策略别名
	Description string             // 授权策略描述
	Enabled     bool               // 授权策略是否启用
	CreatedAt   string             // 授权策略创建时间
	UpdatedAt   string             // 授权策略上次更新时间
	Statement   ModifiedStatements // 授权策略规则集合
}

// 返回的授权策略信息
type ModifiedPolicyData = Data
type jsonData struct {
	Id          string             `json:"id"`          // 记录 ID
	RootUid     int64              `json:"root_uid"`    // 根用户 uid
	Alias       string             `json:"alias"`       // 授权策略别名
	Description string             `json:"description"` // 授权策略描述
	Enabled     bool               `json:"enabled"`     // 授权策略是否启用
	CreatedAt   string             `json:"created_at"`  // 授权策略创建时间
	UpdatedAt   string             `json:"updated_at"`  // 授权策略上次更新时间
	Statement   ModifiedStatements `json:"statement"`   // 授权策略规则集合
}

func (j *Data) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonData{Id: j.Id, RootUid: j.RootUid, Alias: j.Alias, Description: j.Description, Enabled: j.Enabled, CreatedAt: j.CreatedAt, UpdatedAt: j.UpdatedAt, Statement: j.Statement})
}
func (j *Data) UnmarshalJSON(data []byte) error {
	var nj jsonData
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Id = nj.Id
	j.RootUid = nj.RootUid
	j.Alias = nj.Alias
	j.Description = nj.Description
	j.Enabled = nj.Enabled
	j.CreatedAt = nj.CreatedAt
	j.UpdatedAt = nj.UpdatedAt
	j.Statement = nj.Statement
	return nil
}
func (j *Data) validate() error {
	if j.Id == "" {
		return errors.MissingRequiredFieldError{Name: "Id"}
	}
	if j.RootUid == 0 {
		return errors.MissingRequiredFieldError{Name: "RootUid"}
	}
	if j.Alias == "" {
		return errors.MissingRequiredFieldError{Name: "Alias"}
	}
	if j.Description == "" {
		return errors.MissingRequiredFieldError{Name: "Description"}
	}
	if j.CreatedAt == "" {
		return errors.MissingRequiredFieldError{Name: "CreatedAt"}
	}
	if j.UpdatedAt == "" {
		return errors.MissingRequiredFieldError{Name: "UpdatedAt"}
	}
	if len(j.Statement) == 0 {
		return errors.MissingRequiredFieldError{Name: "Statement"}
	}
	for _, value := range j.Statement {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}

// 返回的授权策略响应
type ModifiedPolicyResp = Response
type jsonResponse struct {
	Data ModifiedPolicyData `json:"data"` // 授权策略信息
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Data: j.Data})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Data = nj.Data
	return nil
}
func (j *Response) validate() error {
	if err := j.Data.validate(); err != nil {
		return err
	}
	return nil
}
