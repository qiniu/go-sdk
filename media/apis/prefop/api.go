// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 查询持久化数据处理命令的执行状态
package prefop

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	PersistentId string                          // 持久化数据处理任务 ID
	Credentials  credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	PersistentId string        // 持久化数据处理任务 ID
	Code         int64         // 持久化数据处理任务状态码
	Description  string        // 与状态码相对应的详细描述
	ObjectName   string        // 源对象名称
	BucketName   string        // 源空间名称
	Pipeline     string        // 云处理操作的处理队列
	RequestId    string        // 云处理请求的请求 ID
	Type         int64         // 任务类型，支持 `0` 表示普通任务，`1` 表示闲时任务
	CreatedAt    string        // 任务创建时间
	Items        PfopTaskItems // 云处理操作列表
}

// 返回的持久化数据处理任务中的云处理操作状态
type PfopTaskItem struct {
	Command     string // 云操作命令
	Code        int64  // 云操作状态码
	Description string // 与状态码相对应的详细描述
	Error       string // 如果处理失败，该字段会给出失败的详细原因
	Hash        string // 云处理结果保存在服务端的唯一标识
	ObjectName  string // 云处理结果的外链对象名称
	ReturnOld   int64  // 是否返回了旧的数据
}
type jsonPfopTaskItem struct {
	Command     string `json:"cmd"`             // 云操作命令
	Code        int64  `json:"code"`            // 云操作状态码
	Description string `json:"desc"`            // 与状态码相对应的详细描述
	Error       string `json:"error,omitempty"` // 如果处理失败，该字段会给出失败的详细原因
	Hash        string `json:"hash"`            // 云处理结果保存在服务端的唯一标识
	ObjectName  string `json:"key"`             // 云处理结果的外链对象名称
	ReturnOld   int64  `json:"returnOld"`       // 是否返回了旧的数据
}

func (j *PfopTaskItem) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonPfopTaskItem{Command: j.Command, Code: j.Code, Description: j.Description, Error: j.Error, Hash: j.Hash, ObjectName: j.ObjectName, ReturnOld: j.ReturnOld})
}
func (j *PfopTaskItem) UnmarshalJSON(data []byte) error {
	var nj jsonPfopTaskItem
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Command = nj.Command
	j.Code = nj.Code
	j.Description = nj.Description
	j.Error = nj.Error
	j.Hash = nj.Hash
	j.ObjectName = nj.ObjectName
	j.ReturnOld = nj.ReturnOld
	return nil
}
func (j *PfopTaskItem) validate() error {
	if j.Command == "" {
		return errors.MissingRequiredFieldError{Name: "Command"}
	}
	if j.Code == 0 {
		return errors.MissingRequiredFieldError{Name: "Code"}
	}
	if j.Description == "" {
		return errors.MissingRequiredFieldError{Name: "Description"}
	}
	if j.Hash == "" {
		return errors.MissingRequiredFieldError{Name: "Hash"}
	}
	if j.ObjectName == "" {
		return errors.MissingRequiredFieldError{Name: "ObjectName"}
	}
	if j.ReturnOld == 0 {
		return errors.MissingRequiredFieldError{Name: "ReturnOld"}
	}
	return nil
}

// 返回的持久化数据处理任务中的云处理操作列表
type PfopTaskItems = []PfopTaskItem

// 返回的持久化数据处理任务信息
type PfopTask = Response
type jsonResponse struct {
	PersistentId string        `json:"id"`                     // 持久化数据处理任务 ID
	Code         int64         `json:"code"`                   // 持久化数据处理任务状态码
	Description  string        `json:"desc"`                   // 与状态码相对应的详细描述
	ObjectName   string        `json:"inputKey"`               // 源对象名称
	BucketName   string        `json:"inputBucket"`            // 源空间名称
	Pipeline     string        `json:"pipeline"`               // 云处理操作的处理队列
	RequestId    string        `json:"reqid"`                  // 云处理请求的请求 ID
	Type         int64         `json:"type,omitempty"`         // 任务类型，支持 `0` 表示普通任务，`1` 表示闲时任务
	CreatedAt    string        `json:"creationDate,omitempty"` // 任务创建时间
	Items        PfopTaskItems `json:"items"`                  // 云处理操作列表
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{PersistentId: j.PersistentId, Code: j.Code, Description: j.Description, ObjectName: j.ObjectName, BucketName: j.BucketName, Pipeline: j.Pipeline, RequestId: j.RequestId, Type: j.Type, CreatedAt: j.CreatedAt, Items: j.Items})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.PersistentId = nj.PersistentId
	j.Code = nj.Code
	j.Description = nj.Description
	j.ObjectName = nj.ObjectName
	j.BucketName = nj.BucketName
	j.Pipeline = nj.Pipeline
	j.RequestId = nj.RequestId
	j.Type = nj.Type
	j.CreatedAt = nj.CreatedAt
	j.Items = nj.Items
	return nil
}
func (j *Response) validate() error {
	if j.PersistentId == "" {
		return errors.MissingRequiredFieldError{Name: "PersistentId"}
	}
	if j.Code == 0 {
		return errors.MissingRequiredFieldError{Name: "Code"}
	}
	if j.Description == "" {
		return errors.MissingRequiredFieldError{Name: "Description"}
	}
	if j.ObjectName == "" {
		return errors.MissingRequiredFieldError{Name: "ObjectName"}
	}
	if j.BucketName == "" {
		return errors.MissingRequiredFieldError{Name: "BucketName"}
	}
	if j.Pipeline == "" {
		return errors.MissingRequiredFieldError{Name: "Pipeline"}
	}
	if j.RequestId == "" {
		return errors.MissingRequiredFieldError{Name: "RequestId"}
	}
	if len(j.Items) == 0 {
		return errors.MissingRequiredFieldError{Name: "Items"}
	}
	for _, value := range j.Items {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}
