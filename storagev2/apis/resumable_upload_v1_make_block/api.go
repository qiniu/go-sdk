// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 为后续分片上传创建一个新的块，同时上传第一片数据
package resumable_upload_v1_make_block

import (
	"encoding/json"
	io "github.com/qiniu/go-sdk/v7/internal/io"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	uptoken "github.com/qiniu/go-sdk/v7/storagev2/uptoken"
)

// 调用 API 所用的请求
type Request struct {
	BlockSize int64             // 块大小，单位为字节，每块均为 4 MB，最后一块大小不超过 4 MB
	UpToken   uptoken.Provider  // 上传凭证，如果为空，则使用 HTTPClientOptions 中的 UpToken
	Body      io.ReadSeekCloser // 请求体
}

// 获取 API 所用的响应
type Response struct {
	Ctx       string // 本次上传成功后的块级上传控制信息，用于后续上传片（bput）及创建文件（mkfile）
	Checksum  string // 上传块 SHA1 值，使用 URL 安全的 Base64 编码
	Crc32     int64  // 上传块 CRC32 值，客户可通过此字段对上传块的完整性进行校验
	Offset    int64  // 下一个上传块在切割块中的偏移
	Host      string // 后续上传接收地址
	ExpiredAt int64  // `ctx` 过期时间
}

// 返回下一片数据的上传信息
type NewBlockInfo = Response
type jsonResponse struct {
	Ctx       string `json:"ctx"`        // 本次上传成功后的块级上传控制信息，用于后续上传片（bput）及创建文件（mkfile）
	Checksum  string `json:"checksum"`   // 上传块 SHA1 值，使用 URL 安全的 Base64 编码
	Crc32     int64  `json:"crc32"`      // 上传块 CRC32 值，客户可通过此字段对上传块的完整性进行校验
	Offset    int64  `json:"offset"`     // 下一个上传块在切割块中的偏移
	Host      string `json:"host"`       // 后续上传接收地址
	ExpiredAt int64  `json:"expired_at"` // `ctx` 过期时间
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Ctx: j.Ctx, Checksum: j.Checksum, Crc32: j.Crc32, Offset: j.Offset, Host: j.Host, ExpiredAt: j.ExpiredAt})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Ctx = nj.Ctx
	j.Checksum = nj.Checksum
	j.Crc32 = nj.Crc32
	j.Offset = nj.Offset
	j.Host = nj.Host
	j.ExpiredAt = nj.ExpiredAt
	return nil
}
func (j *Response) validate() error {
	if j.Ctx == "" {
		return errors.MissingRequiredFieldError{Name: "Ctx"}
	}
	if j.Checksum == "" {
		return errors.MissingRequiredFieldError{Name: "Checksum"}
	}
	if j.Crc32 == 0 {
		return errors.MissingRequiredFieldError{Name: "Crc32"}
	}
	if j.Offset == 0 {
		return errors.MissingRequiredFieldError{Name: "Offset"}
	}
	if j.Host == "" {
		return errors.MissingRequiredFieldError{Name: "Host"}
	}
	if j.ExpiredAt == 0 {
		return errors.MissingRequiredFieldError{Name: "ExpiredAt"}
	}
	return nil
}
