// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

package apis

import (
	"context"
	"encoding/json"
	postobject "github.com/qiniu/go-sdk/v7/storagev2/apis/post_object"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"strconv"
	"strings"
)

type innerPostObjectRequest postobject.Request

func (form *innerPostObjectRequest) getBucketName(ctx context.Context) (string, error) {
	putPolicy, err := form.UploadToken.GetPutPolicy(ctx)
	if err != nil {
		return "", err
	} else {
		return putPolicy.GetBucketName()
	}
}
func (form *innerPostObjectRequest) build(ctx context.Context) (*httpclient.MultipartForm, error) {
	multipartForm := new(httpclient.MultipartForm)
	if form.ObjectName != "" {
		multipartForm.SetValue("key", form.ObjectName)
	}
	if form.UploadToken != nil {
		upToken, err := form.UploadToken.GetUpToken(ctx)
		if err != nil {
			return nil, err
		}
		multipartForm.SetValue("token", upToken)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "UploadToken"}
	}
	if form.Crc32 != 0 {
		multipartForm.SetValue("crc32", strconv.FormatInt(form.Crc32, 10))
	}
	if form.File != nil {
		if form.File_FileName == "" {
			return nil, errors.MissingRequiredFieldError{Name: "File_FileName"}
		}
		multipartForm.SetFile("file", form.File_FileName, form.File)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "File"}
	}
	for key, value := range form.CustomData {
		multipartForm.SetValue(key, value)
	}
	return multipartForm, nil
}
func (j *innerPostObjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal((*postobject.Request)(j))
}
func (j *innerPostObjectRequest) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, (*postobject.Request)(j))
}
func (request *innerPostObjectRequest) getAccessKey(ctx context.Context) (string, error) {
	if request.UploadToken != nil {
		if accessKey, err := request.UploadToken.GetAccessKey(ctx); err != nil {
			return "", err
		} else {
			return accessKey, nil
		}
	}
	return "", nil
}

type PostObjectRequest = postobject.Request
type PostObjectResponse = postobject.Response

// 在一次 HTTP 会话中上传单一的一个文件
func (storage *Storage) PostObject(ctx context.Context, request *PostObjectRequest, options *Options) (response *PostObjectResponse, err error) {
	if options == nil {
		options = &Options{}
	}
	innerRequest := (*innerPostObjectRequest)(request)
	serviceNames := []region.ServiceName{region.ServiceUp}
	var pathSegments []string
	pathSegments = append(pathSegments, "")
	path := "/" + strings.Join(pathSegments, "/")
	var rawQuery string
	body, err := innerRequest.build(ctx)
	if err != nil {
		return nil, err
	}
	req := httpclient.Request{Method: "POST", ServiceNames: serviceNames, Path: path, RawQuery: rawQuery, BufferResponse: true, RequestBody: httpclient.GetMultipartFormRequestBody(body)}
	var queryer region.BucketRegionsQueryer
	if storage.client.GetRegions() == nil && storage.client.GetEndpoints() == nil {
		queryer = storage.client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if options.OverwrittenBucketHosts != nil {
				if bucketHosts, err = options.OverwrittenBucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			queryerOptions := region.BucketRegionsQueryerOptions{UseInsecureProtocol: storage.client.UseInsecureProtocol(), HostFreezeDuration: storage.client.GetHostFreezeDuration(), Client: storage.client.GetClient()}
			if hostRetryConfig := storage.client.GetHostRetryConfig(); hostRetryConfig != nil {
				queryerOptions.RetryMax = hostRetryConfig.RetryMax
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, &queryerOptions); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName := options.OverwrittenBucketName
		var accessKey string
		var err error
		if bucketName == "" {
			if bucketName, err = innerRequest.getBucketName(ctx); err != nil {
				return nil, err
			}
		}
		if bucketName == "" {
			if upTokenProvider := storage.client.GetUpToken(); upTokenProvider != nil {
				if putPolicy, err := upTokenProvider.GetPutPolicy(ctx); err != nil {
					return nil, err
				} else if bucketName, err = putPolicy.GetBucketName(); err != nil {
					return nil, err
				}
			}
		}
		if accessKey, err = innerRequest.getAccessKey(ctx); err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := storage.client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey == "" {
			if upTokenProvider := storage.client.GetUpToken(); upTokenProvider != nil {
				if accessKey, err = upTokenProvider.GetAccessKey(ctx); err != nil {
					return nil, err
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody PostObjectResponse
	if _, err := storage.client.DoAndAcceptJSON(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &respBody, nil
}
