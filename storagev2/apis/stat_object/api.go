// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 仅获取对象的元信息，不返回对象的内容
package stat_object

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Entry       string                          // 指定目标对象空间与目标对象名称，格式为 <目标对象空间>:<目标对象名称>
	NeedParts   bool                            // 如果文件是通过分片上传的，是否返回对应的分片信息
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	Size                        int64             // 对象大小，单位为字节
	Hash                        string            // 对象哈希值
	MimeType                    string            // 对象 MIME 类型
	Type                        int64             // 对象存储类型，`0` 表示普通存储，`1` 表示低频存储，`2` 表示归档存储
	PutTime                     int64             // 文件上传时间，UNIX 时间戳格式，单位为 100 纳秒
	EndUser                     string            // 资源内容的唯一属主标识
	RestoringStatus             int64             // 归档存储文件的解冻状态，`2` 表示解冻完成，`1` 表示解冻中；归档文件冻结时，不返回该字段
	Status                      int64             // 文件状态。`1` 表示禁用；只有禁用状态的文件才会返回该字段
	Md5                         string            // 对象 MD5 值，只有通过直传文件和追加文件 API 上传的文件，服务端确保有该字段返回
	ExpirationTime              int64             // 文件过期删除日期，UNIX 时间戳格式，文件在设置过期时间后才会返回该字段
	TransitionToIaTime          int64             // 文件生命周期中转为低频存储的日期，UNIX 时间戳格式，文件在设置转低频后才会返回该字段
	TransitionToArchiveTime     int64             // 文件生命周期中转为归档存储的日期，UNIX 时间戳格式，文件在设置转归档后才会返回该字段
	TransitionToDeepArchiveTime int64             // 文件生命周期中转为深度归档存储的日期，UNIX 时间戳格式，文件在设置转归档后才会返回该字段
	TransitionToArchiveIrTime   int64             // 文件生命周期中转为归档直读存储的日期，UNIX 时间戳格式，文件在设置转归档直读后才会返回该字段
	Metadata                    map[string]string // 对象存储元信息
	Parts                       PartSizes         // 每个分片的大小，如没有指定 need_parts 参数则不返回
}

// 每个分片的大小
type PartSizes = []int64

// 文件元信息
type ObjectMetadata = Response
type jsonResponse struct {
	Size                        int64             `json:"fsize,omitempty"`                   // 对象大小，单位为字节
	Hash                        string            `json:"hash"`                              // 对象哈希值
	MimeType                    string            `json:"mimeType"`                          // 对象 MIME 类型
	Type                        int64             `json:"type,omitempty"`                    // 对象存储类型，`0` 表示普通存储，`1` 表示低频存储，`2` 表示归档存储
	PutTime                     int64             `json:"putTime"`                           // 文件上传时间，UNIX 时间戳格式，单位为 100 纳秒
	EndUser                     string            `json:"endUser,omitempty"`                 // 资源内容的唯一属主标识
	RestoringStatus             int64             `json:"restoreStatus,omitempty"`           // 归档存储文件的解冻状态，`2` 表示解冻完成，`1` 表示解冻中；归档文件冻结时，不返回该字段
	Status                      int64             `json:"status,omitempty"`                  // 文件状态。`1` 表示禁用；只有禁用状态的文件才会返回该字段
	Md5                         string            `json:"md5,omitempty"`                     // 对象 MD5 值，只有通过直传文件和追加文件 API 上传的文件，服务端确保有该字段返回
	ExpirationTime              int64             `json:"expiration,omitempty"`              // 文件过期删除日期，UNIX 时间戳格式，文件在设置过期时间后才会返回该字段
	TransitionToIaTime          int64             `json:"transitionToIA,omitempty"`          // 文件生命周期中转为低频存储的日期，UNIX 时间戳格式，文件在设置转低频后才会返回该字段
	TransitionToArchiveTime     int64             `json:"transitionToARCHIVE,omitempty"`     // 文件生命周期中转为归档存储的日期，UNIX 时间戳格式，文件在设置转归档后才会返回该字段
	TransitionToDeepArchiveTime int64             `json:"transitionToDeepArchive,omitempty"` // 文件生命周期中转为深度归档存储的日期，UNIX 时间戳格式，文件在设置转归档后才会返回该字段
	TransitionToArchiveIrTime   int64             `json:"transitionToArchiveIR,omitempty"`   // 文件生命周期中转为归档直读存储的日期，UNIX 时间戳格式，文件在设置转归档直读后才会返回该字段
	Metadata                    map[string]string `json:"x-qn-meta,omitempty"`               // 对象存储元信息
	Parts                       PartSizes         `json:"parts,omitempty"`                   // 每个分片的大小，如没有指定 need_parts 参数则不返回
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Size: j.Size, Hash: j.Hash, MimeType: j.MimeType, Type: j.Type, PutTime: j.PutTime, EndUser: j.EndUser, RestoringStatus: j.RestoringStatus, Status: j.Status, Md5: j.Md5, ExpirationTime: j.ExpirationTime, TransitionToIaTime: j.TransitionToIaTime, TransitionToArchiveTime: j.TransitionToArchiveTime, TransitionToDeepArchiveTime: j.TransitionToDeepArchiveTime, TransitionToArchiveIrTime: j.TransitionToArchiveIrTime, Metadata: j.Metadata, Parts: j.Parts})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Size = nj.Size
	j.Hash = nj.Hash
	j.MimeType = nj.MimeType
	j.Type = nj.Type
	j.PutTime = nj.PutTime
	j.EndUser = nj.EndUser
	j.RestoringStatus = nj.RestoringStatus
	j.Status = nj.Status
	j.Md5 = nj.Md5
	j.ExpirationTime = nj.ExpirationTime
	j.TransitionToIaTime = nj.TransitionToIaTime
	j.TransitionToArchiveTime = nj.TransitionToArchiveTime
	j.TransitionToDeepArchiveTime = nj.TransitionToDeepArchiveTime
	j.TransitionToArchiveIrTime = nj.TransitionToArchiveIrTime
	j.Metadata = nj.Metadata
	j.Parts = nj.Parts
	return nil
}
func (j *Response) validate() error {
	if j.Hash == "" {
		return errors.MissingRequiredFieldError{Name: "Hash"}
	}
	if j.MimeType == "" {
		return errors.MissingRequiredFieldError{Name: "MimeType"}
	}
	if j.PutTime == 0 {
		return errors.MissingRequiredFieldError{Name: "PutTime"}
	}
	return nil
}
