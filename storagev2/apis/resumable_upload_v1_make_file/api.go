// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 将上传好的所有数据块按指定顺序合并成一个资源文件
package resumable_upload_v1_make_file

import (
	"context"
	"encoding/base64"
	io "github.com/qiniu/go-sdk/v7/internal/io"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	uptoken "github.com/qiniu/go-sdk/v7/storagev2/uptoken"
	"strconv"
	"strings"
)

type RequestPath struct {
	fieldSize        int64
	fieldObjectName  string
	fieldFileName    string
	fieldMimeType    string
	extendedSegments []string
}

func (pp *RequestPath) GetSize() int64 {
	return pp.fieldSize
}
func (pp *RequestPath) SetSize(value int64) *RequestPath {
	pp.fieldSize = value
	return pp
}
func (pp *RequestPath) GetObjectName() string {
	return pp.fieldObjectName
}
func (pp *RequestPath) SetObjectName(value string) *RequestPath {
	pp.fieldObjectName = value
	return pp
}
func (pp *RequestPath) GetFileName() string {
	return pp.fieldFileName
}
func (pp *RequestPath) SetFileName(value string) *RequestPath {
	pp.fieldFileName = value
	return pp
}
func (pp *RequestPath) GetMimeType() string {
	return pp.fieldMimeType
}
func (pp *RequestPath) SetMimeType(value string) *RequestPath {
	pp.fieldMimeType = value
	return pp
}
func (path *RequestPath) Append(key string, value string) *RequestPath {
	path.extendedSegments = append(path.extendedSegments, key)
	path.extendedSegments = append(path.extendedSegments, base64.URLEncoding.EncodeToString([]byte(value)))
	return path
}
func (path *RequestPath) build() ([]string, error) {
	var allSegments []string
	if path.fieldSize != 0 {
		allSegments = append(allSegments, strconv.FormatInt(path.fieldSize, 10))
	}
	if path.fieldObjectName != "" {
		allSegments = append(allSegments, "key", base64.URLEncoding.EncodeToString([]byte(path.fieldObjectName)))
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "ObjectName"}
	}
	if path.fieldFileName != "" {
		allSegments = append(allSegments, "fname", base64.URLEncoding.EncodeToString([]byte(path.fieldFileName)))
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "FileName"}
	}
	if path.fieldMimeType != "" {
		allSegments = append(allSegments, "mimeType", base64.URLEncoding.EncodeToString([]byte(path.fieldMimeType)))
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "MimeType"}
	}
	allSegments = append(allSegments, path.extendedSegments...)
	return allSegments, nil
}

type ResponseBody = interface{}

// 调用 API 所用的请求
type Request struct {
	BucketHosts region.EndpointsProvider
	Path        RequestPath
	UpToken     uptoken.Provider
	Body        io.ReadSeekCloser
}

func (request Request) getBucketName(ctx context.Context) (string, error) {
	if request.UpToken != nil {
		if putPolicy, err := request.UpToken.RetrievePutPolicy(ctx); err != nil {
			return "", err
		} else {
			return putPolicy.GetBucketName()
		}
	}
	return "", nil
}
func (request Request) getAccessKey(ctx context.Context) (string, error) {
	if request.UpToken != nil {
		return request.UpToken.RetrieveAccessKey(ctx)
	}
	return "", nil
}

// 获取 API 所用的响应
type Response struct {
	Body ResponseBody
}

// API 调用客户端
type Client struct {
	client *httpclient.HttpClient
}

// 创建 API 调用客户端
func NewClient(options *httpclient.HttpClientOptions) *Client {
	client := httpclient.NewHttpClient(options)
	return &Client{client: client}
}
func (client *Client) Send(ctx context.Context, request *Request) (*Response, error) {
	serviceNames := []region.ServiceName{region.ServiceUp}
	var pathSegments []string
	pathSegments = append(pathSegments, "mkfile")
	if segments, err := request.Path.build(); err != nil {
		return nil, err
	} else {
		pathSegments = append(pathSegments, segments...)
	}
	path := "/" + strings.Join(pathSegments, "/")
	req := httpclient.Request{Method: "POST", ServiceNames: serviceNames, Path: path, UpToken: request.UpToken, RequestBody: httpclient.GetRequestBodyFromReadSeekCloser(request.Body)}
	var queryer region.BucketRegionsQueryer
	if client.client.GetRegions() == nil && client.client.GetEndpoints() == nil {
		queryer = client.client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.BucketHosts != nil {
				if bucketHosts, err = request.BucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, nil); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody ResponseBody
	if _, err := client.client.AcceptJson(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &Response{Body: respBody}, nil
}
