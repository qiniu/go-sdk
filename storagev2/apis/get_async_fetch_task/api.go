// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 查询异步抓取任务
package get_async_fetch_task

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Id          string                          // 异步任务 ID
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	Id               string // 异步任务 ID
	QueuedTasksCount int64  // 当前任务前面的排队任务数量，`0` 表示当前任务正在进行，`-1` 表示任务已经至少被处理过一次（可能会进入重试逻辑）
}

// 返回的异步任务信息
type FetchTaskInfo = Response
type jsonResponse struct {
	Id               string `json:"id"`   // 异步任务 ID
	QueuedTasksCount int64  `json:"wait"` // 当前任务前面的排队任务数量，`0` 表示当前任务正在进行，`-1` 表示任务已经至少被处理过一次（可能会进入重试逻辑）
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Id: j.Id, QueuedTasksCount: j.QueuedTasksCount})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Id = nj.Id
	j.QueuedTasksCount = nj.QueuedTasksCount
	return nil
}
func (j *Response) validate() error {
	if j.Id == "" {
		return errors.MissingRequiredFieldError{Name: "Id"}
	}
	if j.QueuedTasksCount == 0 {
		return errors.MissingRequiredFieldError{Name: "QueuedTasksCount"}
	}
	return nil
}
