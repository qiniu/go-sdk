// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 查询异步抓取任务
package get_async_fetch_task

import (
	"context"
	"encoding/json"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"net/url"
	"strings"
)

// 调用 API 所用的 URL 查询参数
type RequestQuery struct {
	fieldId string // 异步任务 ID
}

func (query *RequestQuery) GetId() string {
	return query.fieldId
}
func (query *RequestQuery) SetId(value string) *RequestQuery {
	query.fieldId = value
	return query
}
func (query *RequestQuery) build() (url.Values, error) {
	allQuery := make(url.Values)
	if query.fieldId != "" {
		allQuery.Set("id", query.fieldId)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Id"}
	}
	return allQuery, nil
}

type innerFetchTaskInfo struct {
	Id               string `json:"id,omitempty"`   // 异步任务 ID
	QueuedTasksCount int64  `json:"wait,omitempty"` // 当前任务前面的排队任务数量，`0` 表示当前任务正在进行，`-1` 表示任务已经至少被处理过一次（可能会进入重试逻辑）
}

// 返回的异步任务信息
type FetchTaskInfo struct {
	inner innerFetchTaskInfo
}

func (j *FetchTaskInfo) GetId() string {
	return j.inner.Id
}
func (j *FetchTaskInfo) SetId(value string) *FetchTaskInfo {
	j.inner.Id = value
	return j
}
func (j *FetchTaskInfo) GetQueuedTasksCount() int64 {
	return j.inner.QueuedTasksCount
}
func (j *FetchTaskInfo) SetQueuedTasksCount(value int64) *FetchTaskInfo {
	j.inner.QueuedTasksCount = value
	return j
}
func (j *FetchTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(&j.inner)
}
func (j *FetchTaskInfo) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &j.inner)
}

//lint:ignore U1000 may not call it
func (j *FetchTaskInfo) validate() error {
	if j.inner.Id == "" {
		return errors.MissingRequiredFieldError{Name: "Id"}
	}
	if j.inner.QueuedTasksCount == 0 {
		return errors.MissingRequiredFieldError{Name: "QueuedTasksCount"}
	}
	return nil
}

// 获取 API 所用的响应体参数
type ResponseBody = FetchTaskInfo

// 调用 API 所用的请求
type Request struct {
	BucketHosts region.EndpointsProvider
	Query       RequestQuery
}

func (request Request) getBucketName(ctx context.Context) (string, error) {
	return "", nil
}
func (request Request) getAccessKey(ctx context.Context) (string, error) {
	return "", nil
}

// 获取 API 所用的响应
type Response struct {
	Body ResponseBody
}

// API 调用客户端
type Client struct {
	client *httpclient.HttpClient
}

// 创建 API 调用客户端
func NewClient(options *httpclient.HttpClientOptions) *Client {
	client := httpclient.NewHttpClient(options)
	return &Client{client: client}
}
func (client *Client) Send(ctx context.Context, request *Request) (*Response, error) {
	serviceNames := []region.ServiceName{region.ServiceApi}
	var pathSegments []string
	pathSegments = append(pathSegments, "sisyphus", "fetch")
	path := "/" + strings.Join(pathSegments, "/")
	query, err := request.Query.build()
	if err != nil {
		return nil, err
	}
	req := httpclient.Request{Method: "GET", ServiceNames: serviceNames, Path: path, RawQuery: query.Encode()}
	var queryer region.BucketRegionsQueryer
	if client.client.GetRegions() == nil && client.client.GetEndpoints() == nil {
		queryer = client.client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.BucketHosts != nil {
				if bucketHosts, err = request.BucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, nil); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody ResponseBody
	if _, err := client.client.AcceptJson(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &Response{Body: respBody}, nil
}
