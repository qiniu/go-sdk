// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 从指定 URL 抓取指定名称的对象并存储到该空间中
package fetch_object

import (
	"context"
	"encoding/base64"
	"encoding/json"
	auth "github.com/qiniu/go-sdk/v7/auth"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"strings"
)

type RequestPath struct {
	fieldFromUrl string
	fieldToEntry string
	fieldHost    string
}

func (pp *RequestPath) GetFromUrl() string {
	return pp.fieldFromUrl
}
func (pp *RequestPath) SetFromUrl(value string) *RequestPath {
	pp.fieldFromUrl = value
	return pp
}
func (pp *RequestPath) GetToEntry() string {
	return pp.fieldToEntry
}
func (pp *RequestPath) SetToEntry(value string) *RequestPath {
	pp.fieldToEntry = value
	return pp
}
func (pp *RequestPath) GetHost() string {
	return pp.fieldHost
}
func (pp *RequestPath) SetHost(value string) *RequestPath {
	pp.fieldHost = value
	return pp
}
func (pp *RequestPath) getBucketName() (string, error) {
	return strings.SplitN(pp.fieldToEntry, ":", 2)[0], nil
}
func (path *RequestPath) build() ([]string, error) {
	var allSegments []string
	if path.fieldFromUrl != "" {
		allSegments = append(allSegments, base64.URLEncoding.EncodeToString([]byte(path.fieldFromUrl)))
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "FromUrl"}
	}
	if path.fieldToEntry != "" {
		allSegments = append(allSegments, "to", base64.URLEncoding.EncodeToString([]byte(path.fieldToEntry)))
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "ToEntry"}
	}
	if path.fieldHost != "" {
		allSegments = append(allSegments, "host", base64.URLEncoding.EncodeToString([]byte(path.fieldHost)))
	}
	return allSegments, nil
}

type innerFetchedObjectMetadata struct {
	Hash       string `json:"hash,omitempty"`     // 抓取的对象内容的 Etag 值
	ObjectName string `json:"key,omitempty"`      // 抓取后保存的对象名称
	Size       int64  `json:"fsize,omitempty"`    // 对象大小，单位为字节
	MimeType   string `json:"mimeType,omitempty"` // 对象 MIME 类型
}

// 抓取到的文件元信息
type FetchedObjectMetadata struct {
	inner innerFetchedObjectMetadata
}

func (j *FetchedObjectMetadata) GetHash() string {
	return j.inner.Hash
}
func (j *FetchedObjectMetadata) SetHash(value string) *FetchedObjectMetadata {
	j.inner.Hash = value
	return j
}
func (j *FetchedObjectMetadata) GetObjectName() string {
	return j.inner.ObjectName
}
func (j *FetchedObjectMetadata) SetObjectName(value string) *FetchedObjectMetadata {
	j.inner.ObjectName = value
	return j
}
func (j *FetchedObjectMetadata) GetSize() int64 {
	return j.inner.Size
}
func (j *FetchedObjectMetadata) SetSize(value int64) *FetchedObjectMetadata {
	j.inner.Size = value
	return j
}
func (j *FetchedObjectMetadata) GetMimeType() string {
	return j.inner.MimeType
}
func (j *FetchedObjectMetadata) SetMimeType(value string) *FetchedObjectMetadata {
	j.inner.MimeType = value
	return j
}
func (j *FetchedObjectMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(&j.inner)
}
func (j *FetchedObjectMetadata) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &j.inner)
}

//lint:ignore U1000 may not call it
func (j *FetchedObjectMetadata) validate() error {
	if j.inner.Hash == "" {
		return errors.MissingRequiredFieldError{Name: "Hash"}
	}
	if j.inner.ObjectName == "" {
		return errors.MissingRequiredFieldError{Name: "ObjectName"}
	}
	if j.inner.Size == 0 {
		return errors.MissingRequiredFieldError{Name: "Size"}
	}
	if j.inner.MimeType == "" {
		return errors.MissingRequiredFieldError{Name: "MimeType"}
	}
	return nil
}

// 获取 API 所用的响应体参数
type ResponseBody = FetchedObjectMetadata

// 调用 API 所用的请求
type Request struct {
	overwrittenBucketHosts region.EndpointsProvider
	overwrittenBucketName  string
	Path                   RequestPath
	credentials            credentials.CredentialsProvider
}

func (request Request) OverwriteBucketHosts(bucketHosts region.EndpointsProvider) Request {
	request.overwrittenBucketHosts = bucketHosts
	return request
}
func (request Request) OverwriteBucketName(bucketName string) Request {
	request.overwrittenBucketName = bucketName
	return request
}
func (request Request) SetCredentials(credentials credentials.CredentialsProvider) Request {
	request.credentials = credentials
	return request
}
func (request Request) getBucketName(ctx context.Context) (string, error) {
	if request.overwrittenBucketName != "" {
		return request.overwrittenBucketName, nil
	}
	if bucketName, err := request.Path.getBucketName(); err != nil || bucketName != "" {
		return bucketName, err
	}
	return "", nil
}
func (request Request) getAccessKey(ctx context.Context) (string, error) {
	if request.credentials != nil {
		if credentials, err := request.credentials.Get(ctx); err != nil {
			return "", err
		} else {
			return credentials.AccessKey, nil
		}
	}
	return "", nil
}
func (request Request) Send(ctx context.Context, options *httpclient.HttpClientOptions) (*Response, error) {
	client := httpclient.NewHttpClient(options)
	serviceNames := []region.ServiceName{region.ServiceIo}
	var pathSegments []string
	pathSegments = append(pathSegments, "fetch")
	if segments, err := request.Path.build(); err != nil {
		return nil, err
	} else {
		pathSegments = append(pathSegments, segments...)
	}
	path := "/" + strings.Join(pathSegments, "/")
	req := httpclient.Request{Method: "POST", ServiceNames: serviceNames, Path: path, AuthType: auth.TokenQiniu, Credentials: request.credentials}
	var queryer region.BucketRegionsQueryer
	if client.GetRegions() == nil && client.GetEndpoints() == nil {
		queryer = client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.overwrittenBucketHosts != nil {
				if bucketHosts, err = request.overwrittenBucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, nil); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody ResponseBody
	if _, err := client.AcceptJson(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &Response{Body: respBody}, nil
}

// 获取 API 所用的响应
type Response struct {
	Body ResponseBody
}
