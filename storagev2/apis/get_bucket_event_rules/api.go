// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 获取存储空间事件通知规则
package get_bucket_event_rules

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Bucket      string                          // 存储空间名称
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	BucketEventRules BucketEventRules // 所有存储空间事件通知规则
}

// 事件类型
type EventTypes = []string

// 回调地址
type CallbackUrls = []string

// 存储空间事件通知规则
type BucketEventRule struct {
	Name         string       // 规则名称，bucket 内唯一，长度小于 50，不能为空，只能为字母、数字、下划线
	Prefix       string       // 匹配文件前缀
	Suffix       string       // 匹配文件后缀
	EventTypes   EventTypes   // 事件类型，可以指定多个，包括 put，mkfile，delete，copy，move，append，disable，enable，deleteMarkerCreate，predelete(删除之前触发)，restore:completed
	CallbackUrls CallbackUrls // 回调地址，可以指定多个
	AccessKey    string       // 设置的话会对通知请求用对应的 accessKey，secretKey 进行签名
	Host         string       // 通知请求的 Host
}
type jsonBucketEventRule struct {
	Name         string       `json:"name"`                // 规则名称，bucket 内唯一，长度小于 50，不能为空，只能为字母、数字、下划线
	Prefix       string       `json:"prefix,omitempty"`    // 匹配文件前缀
	Suffix       string       `json:"suffix,omitempty"`    // 匹配文件后缀
	EventTypes   EventTypes   `json:"event"`               // 事件类型，可以指定多个，包括 put，mkfile，delete，copy，move，append，disable，enable，deleteMarkerCreate，predelete(删除之前触发)，restore:completed
	CallbackUrls CallbackUrls `json:"callbackURL"`         // 回调地址，可以指定多个
	AccessKey    string       `json:"accessKey,omitempty"` // 设置的话会对通知请求用对应的 accessKey，secretKey 进行签名
	Host         string       `json:"host,omitempty"`      // 通知请求的 Host
}

func (j *BucketEventRule) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonBucketEventRule{Name: j.Name, Prefix: j.Prefix, Suffix: j.Suffix, EventTypes: j.EventTypes, CallbackUrls: j.CallbackUrls, AccessKey: j.AccessKey, Host: j.Host})
}
func (j *BucketEventRule) UnmarshalJSON(data []byte) error {
	var nj jsonBucketEventRule
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Name = nj.Name
	j.Prefix = nj.Prefix
	j.Suffix = nj.Suffix
	j.EventTypes = nj.EventTypes
	j.CallbackUrls = nj.CallbackUrls
	j.AccessKey = nj.AccessKey
	j.Host = nj.Host
	return nil
}
func (j *BucketEventRule) validate() error {
	if j.Name == "" {
		return errors.MissingRequiredFieldError{Name: "Name"}
	}
	if len(j.EventTypes) == 0 {
		return errors.MissingRequiredFieldError{Name: "EventTypes"}
	}
	if len(j.CallbackUrls) == 0 {
		return errors.MissingRequiredFieldError{Name: "CallbackUrls"}
	}
	return nil
}

// 所有存储空间事件通知规则
type BucketEventRules []BucketEventRule

func (j *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.BucketEventRules)
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var array BucketEventRules
	if err := json.Unmarshal(data, &array); err != nil {
		return err
	}
	j.BucketEventRules = array
	return nil
}
