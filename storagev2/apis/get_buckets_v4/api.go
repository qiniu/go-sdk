// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 获取拥有的所有存储空间列表
package get_buckets_v4

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Region      string                          // 区域 ID
	Limit       int64                           // 分页大小。默认20，取值范围 1～100。
	Marker      string                          // 列举开始的空间标识
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	NextMarker  string // 下一页开始的空间标识
	IsTruncated bool   // 是否所有的结果都已经返回
	Buckets     BucketsV4
}

// 存储空间信息
type BucketV4 struct {
	Name        string // 空间名称
	Region      string // 空间区域 ID
	Private     bool   // 空间是否私有
	CreatedTime string // 空间创建时间
}
type jsonBucketV4 struct {
	Name        string `json:"name"`    // 空间名称
	Region      string `json:"region"`  // 空间区域 ID
	Private     bool   `json:"private"` // 空间是否私有
	CreatedTime string `json:"ctime"`   // 空间创建时间
}

func (j *BucketV4) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonBucketV4{Name: j.Name, Region: j.Region, Private: j.Private, CreatedTime: j.CreatedTime})
}
func (j *BucketV4) UnmarshalJSON(data []byte) error {
	var nj jsonBucketV4
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Name = nj.Name
	j.Region = nj.Region
	j.Private = nj.Private
	j.CreatedTime = nj.CreatedTime
	return nil
}
func (j *BucketV4) validate() error {
	if j.Name == "" {
		return errors.MissingRequiredFieldError{Name: "Name"}
	}
	if j.Region == "" {
		return errors.MissingRequiredFieldError{Name: "Region"}
	}
	if j.CreatedTime == "" {
		return errors.MissingRequiredFieldError{Name: "CreatedTime"}
	}
	return nil
}

// 存储空间列表
type BucketsV4 = []BucketV4

// 返回所有存储空间结果
type BucketsResultV4 = Response
type jsonResponse struct {
	NextMarker  string    `json:"nextMarker"`  // 下一页开始的空间标识
	IsTruncated bool      `json:"isTruncated"` // 是否所有的结果都已经返回
	Buckets     BucketsV4 `json:"buckets"`
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{NextMarker: j.NextMarker, IsTruncated: j.IsTruncated, Buckets: j.Buckets})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.NextMarker = nj.NextMarker
	j.IsTruncated = nj.IsTruncated
	j.Buckets = nj.Buckets
	return nil
}
func (j *Response) validate() error {
	if j.NextMarker == "" {
		return errors.MissingRequiredFieldError{Name: "NextMarker"}
	}
	if len(j.Buckets) == 0 {
		return errors.MissingRequiredFieldError{Name: "Buckets"}
	}
	for _, value := range j.Buckets {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}
