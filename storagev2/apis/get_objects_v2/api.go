// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 列举指定存储空间里的所有对象条目
package get_objects_v2

import (
	"context"
	auth "github.com/qiniu/go-sdk/v7/auth"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"io"
	"net/url"
	"strconv"
	"strings"
)

// 调用 API 所用的 URL 查询参数
type RequestQuery struct {
	fieldBucket    string // 指定存储空间
	fieldMarker    string // 上一次列举返回的位置标记，作为本次列举的起点信息
	fieldLimit     int64  // 本次列举的条目数，范围为 1-1000
	fieldPrefix    string // 指定前缀，只有资源名匹配该前缀的资源会被列出
	fieldDelimiter string // 指定目录分隔符，列出所有公共前缀（模拟列出目录效果）
	fieldNeedParts bool   // 如果文件是通过分片上传的，是否返回对应的分片信息
}

// 指定存储空间
func (query *RequestQuery) GetBucket() string {
	return query.fieldBucket
}

// 指定存储空间
func (query *RequestQuery) SetBucket(value string) *RequestQuery {
	query.fieldBucket = value
	return query
}

// 上一次列举返回的位置标记，作为本次列举的起点信息
func (query *RequestQuery) GetMarker() string {
	return query.fieldMarker
}

// 上一次列举返回的位置标记，作为本次列举的起点信息
func (query *RequestQuery) SetMarker(value string) *RequestQuery {
	query.fieldMarker = value
	return query
}

// 本次列举的条目数，范围为 1-1000
func (query *RequestQuery) GetLimit() int64 {
	return query.fieldLimit
}

// 本次列举的条目数，范围为 1-1000
func (query *RequestQuery) SetLimit(value int64) *RequestQuery {
	query.fieldLimit = value
	return query
}

// 指定前缀，只有资源名匹配该前缀的资源会被列出
func (query *RequestQuery) GetPrefix() string {
	return query.fieldPrefix
}

// 指定前缀，只有资源名匹配该前缀的资源会被列出
func (query *RequestQuery) SetPrefix(value string) *RequestQuery {
	query.fieldPrefix = value
	return query
}

// 指定目录分隔符，列出所有公共前缀（模拟列出目录效果）
func (query *RequestQuery) GetDelimiter() string {
	return query.fieldDelimiter
}

// 指定目录分隔符，列出所有公共前缀（模拟列出目录效果）
func (query *RequestQuery) SetDelimiter(value string) *RequestQuery {
	query.fieldDelimiter = value
	return query
}

// 如果文件是通过分片上传的，是否返回对应的分片信息
func (query *RequestQuery) GetNeedParts() bool {
	return query.fieldNeedParts
}

// 如果文件是通过分片上传的，是否返回对应的分片信息
func (query *RequestQuery) SetNeedParts(value bool) *RequestQuery {
	query.fieldNeedParts = value
	return query
}
func (query *RequestQuery) getBucketName() (string, error) {
	return query.fieldBucket, nil
}
func (query *RequestQuery) build() (url.Values, error) {
	allQuery := make(url.Values)
	if query.fieldBucket != "" {
		allQuery.Set("bucket", query.fieldBucket)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Bucket"}
	}
	if query.fieldMarker != "" {
		allQuery.Set("marker", query.fieldMarker)
	}
	if query.fieldLimit != 0 {
		allQuery.Set("limit", strconv.FormatInt(query.fieldLimit, 10))
	}
	if query.fieldPrefix != "" {
		allQuery.Set("prefix", query.fieldPrefix)
	}
	if query.fieldDelimiter != "" {
		allQuery.Set("delimiter", query.fieldDelimiter)
	}
	if query.fieldNeedParts {
		allQuery.Set("needparts", strconv.FormatBool(query.fieldNeedParts))
	}
	return allQuery, nil
}
func (request *Request) GetBucket() string {
	return request.query.GetBucket()
}
func (request *Request) SetBucket(value string) *Request {
	request.query.SetBucket(value)
	return request
}
func (request *Request) GetMarker() string {
	return request.query.GetMarker()
}
func (request *Request) SetMarker(value string) *Request {
	request.query.SetMarker(value)
	return request
}
func (request *Request) GetLimit() int64 {
	return request.query.GetLimit()
}
func (request *Request) SetLimit(value int64) *Request {
	request.query.SetLimit(value)
	return request
}
func (request *Request) GetPrefix() string {
	return request.query.GetPrefix()
}
func (request *Request) SetPrefix(value string) *Request {
	request.query.SetPrefix(value)
	return request
}
func (request *Request) GetDelimiter() string {
	return request.query.GetDelimiter()
}
func (request *Request) SetDelimiter(value string) *Request {
	request.query.SetDelimiter(value)
	return request
}
func (request *Request) GetNeedParts() bool {
	return request.query.GetNeedParts()
}
func (request *Request) SetNeedParts(value bool) *Request {
	request.query.SetNeedParts(value)
	return request
}

// 调用 API 所用的请求
type Request struct {
	overwrittenBucketHosts region.EndpointsProvider
	overwrittenBucketName  string
	query                  RequestQuery
	credentials            credentials.CredentialsProvider
}

// 覆盖默认的存储区域域名列表
func (request *Request) OverwriteBucketHosts(bucketHosts region.EndpointsProvider) *Request {
	request.overwrittenBucketHosts = bucketHosts
	return request
}

// 覆盖存储空间名称
func (request *Request) OverwriteBucketName(bucketName string) *Request {
	request.overwrittenBucketName = bucketName
	return request
}

// 设置鉴权
func (request *Request) SetCredentials(credentials credentials.CredentialsProvider) *Request {
	request.credentials = credentials
	return request
}
func (request *Request) getBucketName(ctx context.Context) (string, error) {
	if request.overwrittenBucketName != "" {
		return request.overwrittenBucketName, nil
	}
	if bucketName, err := request.query.getBucketName(); err != nil || bucketName != "" {
		return bucketName, err
	}
	return "", nil
}
func (request *Request) getAccessKey(ctx context.Context) (string, error) {
	if request.credentials != nil {
		if credentials, err := request.credentials.Get(ctx); err != nil {
			return "", err
		} else {
			return credentials.AccessKey, nil
		}
	}
	return "", nil
}

// 获取请求查询参数
func (request *Request) GetQuery() *RequestQuery {
	return &request.query
}

// 设置请求查询参数
func (request *Request) SetQuery(query RequestQuery) *Request {
	request.query = query
	return request
}

// 发送请求
func (request *Request) Send(ctx context.Context, options *httpclient.HttpClientOptions) (*Response, error) {
	client := httpclient.NewHttpClient(options)
	serviceNames := []region.ServiceName{region.ServiceRsf}
	var pathSegments []string
	pathSegments = append(pathSegments, "v2", "list")
	path := "/" + strings.Join(pathSegments, "/")
	var rawQuery string
	if query, err := request.query.build(); err != nil {
		return nil, err
	} else {
		rawQuery += query.Encode()
	}
	req := httpclient.Request{Method: "GET", ServiceNames: serviceNames, Path: path, RawQuery: rawQuery, AuthType: auth.TokenQiniu, Credentials: request.credentials}
	var queryer region.BucketRegionsQueryer
	if client.GetRegions() == nil && client.GetEndpoints() == nil {
		queryer = client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.overwrittenBucketHosts != nil {
				if bucketHosts, err = request.overwrittenBucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			queryerOptions := region.BucketRegionsQueryerOptions{UseInsecureProtocol: options.UseInsecureProtocol, HostFreezeDuration: options.HostFreezeDuration, Client: options.Client}
			if hostRetryConfig := options.HostRetryConfig; hostRetryConfig != nil {
				queryerOptions.RetryMax = hostRetryConfig.RetryMax
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, &queryerOptions); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	resp, err := client.Do(ctx, &req)
	if err != nil {
		return nil, err
	}
	return &Response{body: resp.Body}, nil
}

// 获取 API 所用的响应
type Response struct {
	body io.ReadCloser
}

// 获取请求体
func (response *Response) GetBody() io.ReadCloser {
	return response.body
}

// 设置请求体
func (response *Response) SetBody(body io.ReadCloser) *Response {
	response.body = body
	return response
}
