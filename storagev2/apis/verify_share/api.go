// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 校验目录分享并提取分享信息
package verify_share

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	ShareId     string                          // 分享 ID
	Token       string                          // 分享 Token
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
	ExtractCode string                          // 提取码
}
type jsonRequest struct {
	ExtractCode string `json:"extract_code"` // 提取码
}

func (j *Request) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonRequest{ExtractCode: j.ExtractCode})
}
func (j *Request) UnmarshalJSON(data []byte) error {
	var nj jsonRequest
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.ExtractCode = nj.ExtractCode
	return nil
}
func (j *Request) validate() error {
	if j.ExtractCode == "" {
		return errors.MissingRequiredFieldError{Name: "ExtractCode"}
	}
	return nil
}

// 获取 API 所用的响应
type Response struct {
	Endpoint     string // 空间所用的 S3 域名
	Region       string // 空间所在的 S3 区域 ID
	BucketName   string // 空间名称
	BucketId     string // 空间 ID
	Prefix       string // 被分享的目录路径
	Permission   string // 权限，目前仅支持 READONLY，未来会支持 READWRITE
	Expires      string // 分享过期时间，遵循 ISO8601 风格，使用 UTC 0 时区时间
	FederatedAk  string // S3 STS Access Key
	FederatedSk  string // S3 STS Secret Key
	SessionToken string // S3 STS Session Token
}

// 返回的经过校验的分享信息
type VerifiedShareInfo = Response
type jsonResponse struct {
	Endpoint     string `json:"endpoint"`      // 空间所用的 S3 域名
	Region       string `json:"region"`        // 空间所在的 S3 区域 ID
	BucketName   string `json:"bucket_name"`   // 空间名称
	BucketId     string `json:"bucket_id"`     // 空间 ID
	Prefix       string `json:"prefix"`        // 被分享的目录路径
	Permission   string `json:"permission"`    // 权限，目前仅支持 READONLY，未来会支持 READWRITE
	Expires      string `json:"expires"`       // 分享过期时间，遵循 ISO8601 风格，使用 UTC 0 时区时间
	FederatedAk  string `json:"federated_ak"`  // S3 STS Access Key
	FederatedSk  string `json:"federated_sk"`  // S3 STS Secret Key
	SessionToken string `json:"session_token"` // S3 STS Session Token
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Endpoint: j.Endpoint, Region: j.Region, BucketName: j.BucketName, BucketId: j.BucketId, Prefix: j.Prefix, Permission: j.Permission, Expires: j.Expires, FederatedAk: j.FederatedAk, FederatedSk: j.FederatedSk, SessionToken: j.SessionToken})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Endpoint = nj.Endpoint
	j.Region = nj.Region
	j.BucketName = nj.BucketName
	j.BucketId = nj.BucketId
	j.Prefix = nj.Prefix
	j.Permission = nj.Permission
	j.Expires = nj.Expires
	j.FederatedAk = nj.FederatedAk
	j.FederatedSk = nj.FederatedSk
	j.SessionToken = nj.SessionToken
	return nil
}
func (j *Response) validate() error {
	if j.Endpoint == "" {
		return errors.MissingRequiredFieldError{Name: "Endpoint"}
	}
	if j.Region == "" {
		return errors.MissingRequiredFieldError{Name: "Region"}
	}
	if j.BucketName == "" {
		return errors.MissingRequiredFieldError{Name: "BucketName"}
	}
	if j.BucketId == "" {
		return errors.MissingRequiredFieldError{Name: "BucketId"}
	}
	if j.Prefix == "" {
		return errors.MissingRequiredFieldError{Name: "Prefix"}
	}
	if j.Permission == "" {
		return errors.MissingRequiredFieldError{Name: "Permission"}
	}
	if j.Expires == "" {
		return errors.MissingRequiredFieldError{Name: "Expires"}
	}
	if j.FederatedAk == "" {
		return errors.MissingRequiredFieldError{Name: "FederatedAk"}
	}
	if j.FederatedSk == "" {
		return errors.MissingRequiredFieldError{Name: "FederatedSk"}
	}
	if j.SessionToken == "" {
		return errors.MissingRequiredFieldError{Name: "SessionToken"}
	}
	return nil
}
