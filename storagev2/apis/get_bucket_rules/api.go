// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 获取空间规则
package get_bucket_rules

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Bucket      string                          // 空间名称
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	BucketRules BucketRules // 空间规则列表
}

// 空间规则
type BucketRule struct {
	Name                   string // 空间规则名称
	Prefix                 string // 匹配的对象名称前缀
	DeleteAfterDays        int64  // 上传文件多少天后删除
	ToIaAfterDays          int64  // 文件上传多少天后转低频存储
	ToArchiveAfterDays     int64  // 文件上传多少天后转归档存储
	ToDeepArchiveAfterDays int64  // 文件上传多少天后转深度归档存储
	ToArchiveIrAfterDays   int64  // 文件上传多少天后转归档直读存储
	CreatedTime            string // 规则创建时间
}
type jsonBucketRule struct {
	Name                   string `json:"name"`                                 // 空间规则名称
	Prefix                 string `json:"prefix"`                               // 匹配的对象名称前缀
	DeleteAfterDays        int64  `json:"delete_after_days,omitempty"`          // 上传文件多少天后删除
	ToIaAfterDays          int64  `json:"to_line_after_days,omitempty"`         // 文件上传多少天后转低频存储
	ToArchiveAfterDays     int64  `json:"to_archive_after_days,omitempty"`      // 文件上传多少天后转归档存储
	ToDeepArchiveAfterDays int64  `json:"to_deep_archive_after_days,omitempty"` // 文件上传多少天后转深度归档存储
	ToArchiveIrAfterDays   int64  `json:"to_archive_ir_after_days,omitempty"`   // 文件上传多少天后转归档直读存储
	CreatedTime            string `json:"ctime"`                                // 规则创建时间
}

func (j *BucketRule) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonBucketRule{Name: j.Name, Prefix: j.Prefix, DeleteAfterDays: j.DeleteAfterDays, ToIaAfterDays: j.ToIaAfterDays, ToArchiveAfterDays: j.ToArchiveAfterDays, ToDeepArchiveAfterDays: j.ToDeepArchiveAfterDays, ToArchiveIrAfterDays: j.ToArchiveIrAfterDays, CreatedTime: j.CreatedTime})
}
func (j *BucketRule) UnmarshalJSON(data []byte) error {
	var nj jsonBucketRule
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Name = nj.Name
	j.Prefix = nj.Prefix
	j.DeleteAfterDays = nj.DeleteAfterDays
	j.ToIaAfterDays = nj.ToIaAfterDays
	j.ToArchiveAfterDays = nj.ToArchiveAfterDays
	j.ToDeepArchiveAfterDays = nj.ToDeepArchiveAfterDays
	j.ToArchiveIrAfterDays = nj.ToArchiveIrAfterDays
	j.CreatedTime = nj.CreatedTime
	return nil
}
func (j *BucketRule) validate() error {
	if j.Name == "" {
		return errors.MissingRequiredFieldError{Name: "Name"}
	}
	if j.Prefix == "" {
		return errors.MissingRequiredFieldError{Name: "Prefix"}
	}
	if j.CreatedTime == "" {
		return errors.MissingRequiredFieldError{Name: "CreatedTime"}
	}
	return nil
}

// 空间规则列表
type BucketRules []BucketRule

func (j *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.BucketRules)
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var array BucketRules
	if err := json.Unmarshal(data, &array); err != nil {
		return err
	}
	j.BucketRules = array
	return nil
}
