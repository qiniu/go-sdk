// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 列举指定存储空间里的所有对象条目
package get_objects

import (
	"context"
	"encoding/json"
	auth "github.com/qiniu/go-sdk/v7/auth"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"net/url"
	"strconv"
	"strings"
)

// 调用 API 所用的 URL 查询参数
type RequestQuery struct {
	fieldBucket    string // 指定存储空间
	fieldMarker    string // 上一次列举返回的位置标记，作为本次列举的起点信息
	fieldLimit     int64  // 本次列举的条目数，范围为 1-1000
	fieldPrefix    string // 指定前缀，只有资源名匹配该前缀的资源会被列出
	fieldDelimiter string // 指定目录分隔符，列出所有公共前缀（模拟列出目录效果）
	fieldNeedParts bool   // 如果文件是通过分片上传的，是否返回对应的分片信息
}

func (query *RequestQuery) GetBucket() string {
	return query.fieldBucket
}
func (query *RequestQuery) SetBucket(value string) *RequestQuery {
	query.fieldBucket = value
	return query
}
func (query *RequestQuery) GetMarker() string {
	return query.fieldMarker
}
func (query *RequestQuery) SetMarker(value string) *RequestQuery {
	query.fieldMarker = value
	return query
}
func (query *RequestQuery) GetLimit() int64 {
	return query.fieldLimit
}
func (query *RequestQuery) SetLimit(value int64) *RequestQuery {
	query.fieldLimit = value
	return query
}
func (query *RequestQuery) GetPrefix() string {
	return query.fieldPrefix
}
func (query *RequestQuery) SetPrefix(value string) *RequestQuery {
	query.fieldPrefix = value
	return query
}
func (query *RequestQuery) GetDelimiter() string {
	return query.fieldDelimiter
}
func (query *RequestQuery) SetDelimiter(value string) *RequestQuery {
	query.fieldDelimiter = value
	return query
}
func (query *RequestQuery) GetNeedParts() bool {
	return query.fieldNeedParts
}
func (query *RequestQuery) SetNeedParts(value bool) *RequestQuery {
	query.fieldNeedParts = value
	return query
}
func (query *RequestQuery) getBucketName() (string, error) {
	return query.fieldBucket, nil
}
func (query *RequestQuery) build() (url.Values, error) {
	allQuery := make(url.Values)
	if query.fieldBucket != "" {
		allQuery.Set("bucket", query.fieldBucket)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Bucket"}
	}
	if query.fieldMarker != "" {
		allQuery.Set("marker", query.fieldMarker)
	}
	if query.fieldLimit != 0 {
		allQuery.Set("limit", strconv.FormatInt(query.fieldLimit, 10))
	}
	if query.fieldPrefix != "" {
		allQuery.Set("prefix", query.fieldPrefix)
	}
	if query.fieldDelimiter != "" {
		allQuery.Set("delimiter", query.fieldDelimiter)
	}
	if query.fieldNeedParts {
		allQuery.Set("needparts", strconv.FormatBool(query.fieldNeedParts))
	}
	return allQuery, nil
}

// 公共前缀的数组
type CommonPrefixes = []string

// 每个分片的大小
type PartSizes = []int64

// 每个分片的大小，如没有指定 need_parts 参数则不返回
type Parts = PartSizes
type innerListedObjectEntry struct {
	Key             string    `json:"key"`               // 对象名称
	PutTime         int64     `json:"putTime"`           // 文件上传时间，UNIX 时间戳格式，单位为 100 纳秒
	Hash            string    `json:"hash"`              // 文件的哈希值
	Size            int64     `json:"fsize"`             // 对象大小，单位为字节
	MimeType        string    `json:"mimeType"`          // 对象 MIME 类型
	Type            int64     `json:"type,omitempty"`    // 对象存储类型，`0` 表示普通存储，`1` 表示低频存储，`2` 表示归档存储
	EndUser         string    `json:"endUser,omitempty"` // 资源内容的唯一属主标识
	RestoringStatus int64     `json:"status,omitempty"`  // 文件的存储状态，即禁用状态和启用状态间的的互相转换，`0` 表示启用，`1`表示禁用
	Md5             string    `json:"md5,omitempty"`     // 对象 MD5 值，只有通过直传文件和追加文件 API 上传的文件，服务端确保有该字段返回
	Parts           PartSizes `json:"parts,omitempty"`   // 每个分片的大小，如没有指定 need_parts 参数则不返回
}

// 对象条目，包含对象的元信息
type ListedObjectEntry struct {
	inner innerListedObjectEntry
}

func (j *ListedObjectEntry) GetKey() string {
	return j.inner.Key
}
func (j *ListedObjectEntry) SetKey(value string) *ListedObjectEntry {
	j.inner.Key = value
	return j
}
func (j *ListedObjectEntry) GetPutTime() int64 {
	return j.inner.PutTime
}
func (j *ListedObjectEntry) SetPutTime(value int64) *ListedObjectEntry {
	j.inner.PutTime = value
	return j
}
func (j *ListedObjectEntry) GetHash() string {
	return j.inner.Hash
}
func (j *ListedObjectEntry) SetHash(value string) *ListedObjectEntry {
	j.inner.Hash = value
	return j
}
func (j *ListedObjectEntry) GetSize() int64 {
	return j.inner.Size
}
func (j *ListedObjectEntry) SetSize(value int64) *ListedObjectEntry {
	j.inner.Size = value
	return j
}
func (j *ListedObjectEntry) GetMimeType() string {
	return j.inner.MimeType
}
func (j *ListedObjectEntry) SetMimeType(value string) *ListedObjectEntry {
	j.inner.MimeType = value
	return j
}
func (j *ListedObjectEntry) GetType() int64 {
	return j.inner.Type
}
func (j *ListedObjectEntry) SetType(value int64) *ListedObjectEntry {
	j.inner.Type = value
	return j
}
func (j *ListedObjectEntry) GetEndUser() string {
	return j.inner.EndUser
}
func (j *ListedObjectEntry) SetEndUser(value string) *ListedObjectEntry {
	j.inner.EndUser = value
	return j
}
func (j *ListedObjectEntry) GetRestoringStatus() int64 {
	return j.inner.RestoringStatus
}
func (j *ListedObjectEntry) SetRestoringStatus(value int64) *ListedObjectEntry {
	j.inner.RestoringStatus = value
	return j
}
func (j *ListedObjectEntry) GetMd5() string {
	return j.inner.Md5
}
func (j *ListedObjectEntry) SetMd5(value string) *ListedObjectEntry {
	j.inner.Md5 = value
	return j
}
func (j *ListedObjectEntry) GetParts() PartSizes {
	return j.inner.Parts
}
func (j *ListedObjectEntry) SetParts(value PartSizes) *ListedObjectEntry {
	j.inner.Parts = value
	return j
}
func (j *ListedObjectEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(&j.inner)
}
func (j *ListedObjectEntry) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &j.inner)
}

//lint:ignore U1000 may not call it
func (j *ListedObjectEntry) validate() error {
	if j.inner.Key == "" {
		return errors.MissingRequiredFieldError{Name: "Key"}
	}
	if j.inner.PutTime == 0 {
		return errors.MissingRequiredFieldError{Name: "PutTime"}
	}
	if j.inner.Hash == "" {
		return errors.MissingRequiredFieldError{Name: "Hash"}
	}
	if j.inner.Size == 0 {
		return errors.MissingRequiredFieldError{Name: "Size"}
	}
	if j.inner.MimeType == "" {
		return errors.MissingRequiredFieldError{Name: "MimeType"}
	}
	return nil
}

// 条目的数组，不能用来判断是否还有剩余条目
type ListedObjects = []ListedObjectEntry

// 条目的数组，不能用来判断是否还有剩余条目
type Items = ListedObjects
type innerListedObjectEntries struct {
	Marker         string         `json:"marker,omitempty"`          // 有剩余条目则返回非空字符串，作为下一次列举的参数传入，如果没有剩余条目则返回空字符串
	CommonPrefixes CommonPrefixes `json:"common_prefixes,omitempty"` // 公共前缀的数组，如没有指定 delimiter 参数则不返回
	Items          ListedObjects  `json:"items"`                     // 条目的数组，不能用来判断是否还有剩余条目
}

// 本次列举的对象条目信息
type ListedObjectEntries struct {
	inner innerListedObjectEntries
}

func (j *ListedObjectEntries) GetMarker() string {
	return j.inner.Marker
}
func (j *ListedObjectEntries) SetMarker(value string) *ListedObjectEntries {
	j.inner.Marker = value
	return j
}
func (j *ListedObjectEntries) GetCommonPrefixes() CommonPrefixes {
	return j.inner.CommonPrefixes
}
func (j *ListedObjectEntries) SetCommonPrefixes(value CommonPrefixes) *ListedObjectEntries {
	j.inner.CommonPrefixes = value
	return j
}
func (j *ListedObjectEntries) GetItems() ListedObjects {
	return j.inner.Items
}
func (j *ListedObjectEntries) SetItems(value ListedObjects) *ListedObjectEntries {
	j.inner.Items = value
	return j
}
func (j *ListedObjectEntries) MarshalJSON() ([]byte, error) {
	return json.Marshal(&j.inner)
}
func (j *ListedObjectEntries) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &j.inner)
}

//lint:ignore U1000 may not call it
func (j *ListedObjectEntries) validate() error {
	if len(j.inner.Items) > 0 {
		return errors.MissingRequiredFieldError{Name: "Items"}
	}
	for _, value := range j.inner.Items {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}

// 获取 API 所用的响应体参数
type ResponseBody = ListedObjectEntries

// 调用 API 所用的请求
type Request struct {
	overwrittenBucketHosts region.EndpointsProvider
	overwrittenBucketName  string
	Query                  RequestQuery
	credentials            credentials.CredentialsProvider
}

func (request *Request) OverwriteBucketHosts(bucketHosts region.EndpointsProvider) *Request {
	request.overwrittenBucketHosts = bucketHosts
	return request
}
func (request *Request) OverwriteBucketName(bucketName string) *Request {
	request.overwrittenBucketName = bucketName
	return request
}
func (request *Request) SetCredentials(credentials credentials.CredentialsProvider) *Request {
	request.credentials = credentials
	return request
}
func (request *Request) getBucketName(ctx context.Context) (string, error) {
	if request.overwrittenBucketName != "" {
		return request.overwrittenBucketName, nil
	}
	if bucketName, err := request.Query.getBucketName(); err != nil || bucketName != "" {
		return bucketName, err
	}
	return "", nil
}
func (request *Request) getAccessKey(ctx context.Context) (string, error) {
	if request.credentials != nil {
		if credentials, err := request.credentials.Get(ctx); err != nil {
			return "", err
		} else {
			return credentials.AccessKey, nil
		}
	}
	return "", nil
}
func (request *Request) Send(ctx context.Context, options *httpclient.HttpClientOptions) (*Response, error) {
	client := httpclient.NewHttpClient(options)
	serviceNames := []region.ServiceName{region.ServiceRsf}
	var pathSegments []string
	pathSegments = append(pathSegments, "list")
	path := "/" + strings.Join(pathSegments, "/")
	query, err := request.Query.build()
	if err != nil {
		return nil, err
	}
	req := httpclient.Request{Method: "GET", ServiceNames: serviceNames, Path: path, RawQuery: query.Encode(), AuthType: auth.TokenQiniu, Credentials: request.credentials}
	var queryer region.BucketRegionsQueryer
	if client.GetRegions() == nil && client.GetEndpoints() == nil {
		queryer = client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.overwrittenBucketHosts != nil {
				if bucketHosts, err = request.overwrittenBucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, nil); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody ResponseBody
	if _, err := client.AcceptJson(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &Response{Body: respBody}, nil
}

// 获取 API 所用的响应
type Response struct {
	Body ResponseBody
}
