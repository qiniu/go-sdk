// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 列举指定存储空间里的所有对象条目
package get_objects

import (
	"encoding/json"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
)

// 调用 API 所用的请求
type Request struct {
	Bucket      string                          // 指定存储空间
	Marker      string                          // 上一次列举返回的位置标记，作为本次列举的起点信息
	Limit       int64                           // 本次列举的条目数，范围为 1-1000
	Prefix      string                          // 指定前缀，只有资源名匹配该前缀的资源会被列出
	Delimiter   string                          // 指定目录分隔符，列出所有公共前缀（模拟列出目录效果）
	NeedParts   bool                            // 如果文件是通过分片上传的，是否返回对应的分片信息
	Credentials credentials.CredentialsProvider // 鉴权参数，用于生成鉴权凭证，如果为空，则使用 HTTPClientOptions 中的 CredentialsProvider
}

// 获取 API 所用的响应
type Response struct {
	Marker         string         // 有剩余条目则返回非空字符串，作为下一次列举的参数传入，如果没有剩余条目则返回空字符串
	CommonPrefixes CommonPrefixes // 公共前缀的数组，如没有指定 delimiter 参数则不返回
	Items          ListedObjects  // 条目的数组，不能用来判断是否还有剩余条目
}

// 公共前缀的数组
type CommonPrefixes = []string

// 每个分片的大小
type PartSizes = []int64

// 对象条目，包含对象的元信息
type ListedObjectEntry struct {
	Key             string    // 对象名称
	PutTime         int64     // 文件上传时间，UNIX 时间戳格式，单位为 100 纳秒
	Hash            string    // 文件的哈希值
	Size            int64     // 对象大小，单位为字节
	MimeType        string    // 对象 MIME 类型
	Type            int64     // 对象存储类型，`0` 表示普通存储，`1` 表示低频存储，`2` 表示归档存储
	EndUser         string    // 资源内容的唯一属主标识
	RestoringStatus int64     // 文件的存储状态，即禁用状态和启用状态间的的互相转换，`0` 表示启用，`1`表示禁用
	Md5             string    // 对象 MD5 值，只有通过直传文件和追加文件 API 上传的文件，服务端确保有该字段返回
	Parts           PartSizes // 每个分片的大小，如没有指定 need_parts 参数则不返回
}
type jsonListedObjectEntry struct {
	Key             string    `json:"key"`               // 对象名称
	PutTime         int64     `json:"putTime"`           // 文件上传时间，UNIX 时间戳格式，单位为 100 纳秒
	Hash            string    `json:"hash"`              // 文件的哈希值
	Size            int64     `json:"fsize,omitempty"`   // 对象大小，单位为字节
	MimeType        string    `json:"mimeType"`          // 对象 MIME 类型
	Type            int64     `json:"type,omitempty"`    // 对象存储类型，`0` 表示普通存储，`1` 表示低频存储，`2` 表示归档存储
	EndUser         string    `json:"endUser,omitempty"` // 资源内容的唯一属主标识
	RestoringStatus int64     `json:"status,omitempty"`  // 文件的存储状态，即禁用状态和启用状态间的的互相转换，`0` 表示启用，`1`表示禁用
	Md5             string    `json:"md5,omitempty"`     // 对象 MD5 值，只有通过直传文件和追加文件 API 上传的文件，服务端确保有该字段返回
	Parts           PartSizes `json:"parts,omitempty"`   // 每个分片的大小，如没有指定 need_parts 参数则不返回
}

func (j *ListedObjectEntry) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonListedObjectEntry{Key: j.Key, PutTime: j.PutTime, Hash: j.Hash, Size: j.Size, MimeType: j.MimeType, Type: j.Type, EndUser: j.EndUser, RestoringStatus: j.RestoringStatus, Md5: j.Md5, Parts: j.Parts})
}
func (j *ListedObjectEntry) UnmarshalJSON(data []byte) error {
	var nj jsonListedObjectEntry
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Key = nj.Key
	j.PutTime = nj.PutTime
	j.Hash = nj.Hash
	j.Size = nj.Size
	j.MimeType = nj.MimeType
	j.Type = nj.Type
	j.EndUser = nj.EndUser
	j.RestoringStatus = nj.RestoringStatus
	j.Md5 = nj.Md5
	j.Parts = nj.Parts
	return nil
}
func (j *ListedObjectEntry) validate() error {
	if j.Key == "" {
		return errors.MissingRequiredFieldError{Name: "Key"}
	}
	if j.PutTime == 0 {
		return errors.MissingRequiredFieldError{Name: "PutTime"}
	}
	if j.Hash == "" {
		return errors.MissingRequiredFieldError{Name: "Hash"}
	}
	if j.MimeType == "" {
		return errors.MissingRequiredFieldError{Name: "MimeType"}
	}
	return nil
}

// 条目的数组，不能用来判断是否还有剩余条目
type ListedObjects = []ListedObjectEntry

// 本次列举的对象条目信息
type ListedObjectEntries = Response
type jsonResponse struct {
	Marker         string         `json:"marker,omitempty"`         // 有剩余条目则返回非空字符串，作为下一次列举的参数传入，如果没有剩余条目则返回空字符串
	CommonPrefixes CommonPrefixes `json:"commonPrefixes,omitempty"` // 公共前缀的数组，如没有指定 delimiter 参数则不返回
	Items          ListedObjects  `json:"items"`                    // 条目的数组，不能用来判断是否还有剩余条目
}

func (j *Response) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	return json.Marshal(&jsonResponse{Marker: j.Marker, CommonPrefixes: j.CommonPrefixes, Items: j.Items})
}
func (j *Response) UnmarshalJSON(data []byte) error {
	var nj jsonResponse
	if err := json.Unmarshal(data, &nj); err != nil {
		return err
	}
	j.Marker = nj.Marker
	j.CommonPrefixes = nj.CommonPrefixes
	j.Items = nj.Items
	return nil
}
func (j *Response) validate() error {
	if len(j.Items) == 0 {
		return errors.MissingRequiredFieldError{Name: "Items"}
	}
	for _, value := range j.Items {
		if err := value.validate(); err != nil {
			return err
		}
	}
	return nil
}
