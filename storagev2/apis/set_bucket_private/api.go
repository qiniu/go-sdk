// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 设置存储空间的访问权限
package set_bucket_private

import (
	"context"
	auth "github.com/qiniu/go-sdk/v7/auth"
	credentials "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"net/url"
	"strconv"
	"strings"
)

// 调用 API 所用的请求体
type RequestBody struct {
	fieldBucket    string // 空间名称
	fieldIsPrivate int64  // `0`: 公开，`1`: 私有
}

// 空间名称
func (form *RequestBody) GetBucket() string {
	return form.fieldBucket
}

// 空间名称
func (form *RequestBody) SetBucket(value string) *RequestBody {
	form.fieldBucket = value
	return form
}

// `0`: 公开，`1`: 私有
func (form *RequestBody) IsPrivate() int64 {
	return form.fieldIsPrivate
}

// `0`: 公开，`1`: 私有
func (form *RequestBody) SetPrivate(value int64) *RequestBody {
	form.fieldIsPrivate = value
	return form
}
func (form *RequestBody) getBucketName() (string, error) {
	return form.fieldBucket, nil
}
func (form *RequestBody) build() (url.Values, error) {
	formValues := make(url.Values)
	if form.fieldBucket != "" {
		formValues.Set("bucket", form.fieldBucket)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Bucket"}
	}
	formValues.Set("private", strconv.FormatInt(form.fieldIsPrivate, 10))
	return formValues, nil
}

// 空间名称
func (request *Request) GetBucket() string {
	return request.body.GetBucket()
}

// 空间名称
func (request *Request) SetBucket(value string) *Request {
	request.body.SetBucket(value)
	return request
}

// `0`: 公开，`1`: 私有
func (request *Request) IsPrivate() int64 {
	return request.body.IsPrivate()
}

// `0`: 公开，`1`: 私有
func (request *Request) SetPrivate(value int64) *Request {
	request.body.SetPrivate(value)
	return request
}

// 调用 API 所用的请求
type Request struct {
	overwrittenBucketHosts region.EndpointsProvider
	overwrittenBucketName  string
	credentials            credentials.CredentialsProvider
	body                   RequestBody
}

// 覆盖默认的存储区域域名列表
func (request *Request) OverwriteBucketHosts(bucketHosts region.EndpointsProvider) *Request {
	request.overwrittenBucketHosts = bucketHosts
	return request
}

// 覆盖存储空间名称
func (request *Request) OverwriteBucketName(bucketName string) *Request {
	request.overwrittenBucketName = bucketName
	return request
}

// 设置鉴权
func (request *Request) SetCredentials(credentials credentials.CredentialsProvider) *Request {
	request.credentials = credentials
	return request
}
func (request *Request) getBucketName(ctx context.Context) (string, error) {
	if request.overwrittenBucketName != "" {
		return request.overwrittenBucketName, nil
	}
	if bucketName, err := request.body.getBucketName(); err != nil || bucketName != "" {
		return bucketName, err
	}
	return "", nil
}
func (request *Request) getAccessKey(ctx context.Context) (string, error) {
	if request.credentials != nil {
		if credentials, err := request.credentials.Get(ctx); err != nil {
			return "", err
		} else {
			return credentials.AccessKey, nil
		}
	}
	return "", nil
}

// 获取请求体
func (request *Request) GetBody() *RequestBody {
	return &request.body
}

// 设置请求体
func (request *Request) SetBody(body RequestBody) *Request {
	request.body = body
	return request
}

// 发送请求
func (request *Request) Send(ctx context.Context, options *httpclient.HttpClientOptions) (*Response, error) {
	client := httpclient.NewHttpClient(options)
	serviceNames := []region.ServiceName{region.ServiceBucket}
	var pathSegments []string
	pathSegments = append(pathSegments, "private")
	path := "/" + strings.Join(pathSegments, "/")
	var rawQuery string
	body, err := request.body.build()
	if err != nil {
		return nil, err
	}
	req := httpclient.Request{Method: "POST", ServiceNames: serviceNames, Path: path, RawQuery: rawQuery, AuthType: auth.TokenQiniu, Credentials: request.credentials, RequestBody: httpclient.GetFormRequestBody(body)}
	var queryer region.BucketRegionsQueryer
	if client.GetRegions() == nil && client.GetEndpoints() == nil {
		queryer = client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			if request.overwrittenBucketHosts != nil {
				req.Endpoints = request.overwrittenBucketHosts
			} else {
				req.Endpoints = bucketHosts
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	resp, err := client.Do(ctx, &req)
	if err != nil {
		return nil, err
	}
	return &Response{}, resp.Body.Close()
}

// 获取 API 所用的响应
type Response struct{}
