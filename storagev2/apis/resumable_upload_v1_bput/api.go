// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

// 上传指定块的一片数据，具体数据量可根据现场环境调整，同一块的每片数据必须串行上传
package resumable_upload_v1_bput

import (
	"context"
	"encoding/json"
	io "github.com/qiniu/go-sdk/v7/internal/io"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	uptoken "github.com/qiniu/go-sdk/v7/storagev2/uptoken"
	"strconv"
	"strings"
)

type RequestPath struct {
	fieldCtx         string
	fieldChunkOffset int64
}

func (pp *RequestPath) GetCtx() string {
	return pp.fieldCtx
}
func (pp *RequestPath) SetCtx(value string) *RequestPath {
	pp.fieldCtx = value
	return pp
}
func (pp *RequestPath) GetChunkOffset() int64 {
	return pp.fieldChunkOffset
}
func (pp *RequestPath) SetChunkOffset(value int64) *RequestPath {
	pp.fieldChunkOffset = value
	return pp
}
func (path *RequestPath) build() ([]string, error) {
	var allSegments []string
	if path.fieldCtx != "" {
		allSegments = append(allSegments, path.fieldCtx)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Ctx"}
	}
	allSegments = append(allSegments, strconv.FormatInt(path.fieldChunkOffset, 10))
	return allSegments, nil
}

type innerChunkInfo struct {
	Ctx       string `json:"ctx"`        // 本次上传成功后的块级上传控制信息，用于后续上传片（bput）及创建文件（mkfile）
	Checksum  string `json:"checksum"`   // 上传块 SHA1 值，使用 URL 安全的 Base64 编码
	Crc32     int64  `json:"crc32"`      // 上传块 CRC32 值，客户可通过此字段对上传块的完整性进行校验
	Offset    int64  `json:"offset"`     // 下一个上传块在切割块中的偏移
	Host      string `json:"host"`       // 后续上传接收地址
	ExpiredAt string `json:"expired_at"` // `ctx` 过期时间
}

// 返回下一片数据的上传信息
type ChunkInfo struct {
	inner innerChunkInfo
}

func (j *ChunkInfo) GetCtx() string {
	return j.inner.Ctx
}
func (j *ChunkInfo) SetCtx(value string) *ChunkInfo {
	j.inner.Ctx = value
	return j
}
func (j *ChunkInfo) GetChecksum() string {
	return j.inner.Checksum
}
func (j *ChunkInfo) SetChecksum(value string) *ChunkInfo {
	j.inner.Checksum = value
	return j
}
func (j *ChunkInfo) GetCrc32() int64 {
	return j.inner.Crc32
}
func (j *ChunkInfo) SetCrc32(value int64) *ChunkInfo {
	j.inner.Crc32 = value
	return j
}
func (j *ChunkInfo) GetOffset() int64 {
	return j.inner.Offset
}
func (j *ChunkInfo) SetOffset(value int64) *ChunkInfo {
	j.inner.Offset = value
	return j
}
func (j *ChunkInfo) GetHost() string {
	return j.inner.Host
}
func (j *ChunkInfo) SetHost(value string) *ChunkInfo {
	j.inner.Host = value
	return j
}
func (j *ChunkInfo) GetExpiredAt() string {
	return j.inner.ExpiredAt
}
func (j *ChunkInfo) SetExpiredAt(value string) *ChunkInfo {
	j.inner.ExpiredAt = value
	return j
}
func (j *ChunkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(&j.inner)
}
func (j *ChunkInfo) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &j.inner)
}

//lint:ignore U1000 may not call it
func (j *ChunkInfo) validate() error {
	if j.inner.Ctx == "" {
		return errors.MissingRequiredFieldError{Name: "Ctx"}
	}
	if j.inner.Checksum == "" {
		return errors.MissingRequiredFieldError{Name: "Checksum"}
	}
	if j.inner.Crc32 == 0 {
		return errors.MissingRequiredFieldError{Name: "Crc32"}
	}
	if j.inner.Offset == 0 {
		return errors.MissingRequiredFieldError{Name: "Offset"}
	}
	if j.inner.Host == "" {
		return errors.MissingRequiredFieldError{Name: "Host"}
	}
	if j.inner.ExpiredAt == "" {
		return errors.MissingRequiredFieldError{Name: "ExpiredAt"}
	}
	return nil
}

// 获取 API 所用的响应体参数
type ResponseBody = ChunkInfo

// 调用 API 所用的请求
type Request struct {
	overwrittenBucketHosts region.EndpointsProvider
	overwrittenBucketName  string
	Path                   RequestPath
	upToken                uptoken.Provider
	Body                   io.ReadSeekCloser
}

func (request *Request) OverwriteBucketHosts(bucketHosts region.EndpointsProvider) *Request {
	request.overwrittenBucketHosts = bucketHosts
	return request
}
func (request *Request) OverwriteBucketName(bucketName string) *Request {
	request.overwrittenBucketName = bucketName
	return request
}
func (request *Request) SetUpToken(upToken uptoken.Provider) *Request {
	request.upToken = upToken
	return request
}
func (request *Request) getBucketName(ctx context.Context) (string, error) {
	if request.overwrittenBucketName != "" {
		return request.overwrittenBucketName, nil
	}
	if request.upToken != nil {
		if putPolicy, err := request.upToken.RetrievePutPolicy(ctx); err != nil {
			return "", err
		} else {
			return putPolicy.GetBucketName()
		}
	}
	return "", nil
}
func (request *Request) getAccessKey(ctx context.Context) (string, error) {
	if request.upToken != nil {
		return request.upToken.RetrieveAccessKey(ctx)
	}
	return "", nil
}
func (request *Request) Send(ctx context.Context, options *httpclient.HttpClientOptions) (*Response, error) {
	client := httpclient.NewHttpClient(options)
	serviceNames := []region.ServiceName{region.ServiceUp}
	var pathSegments []string
	pathSegments = append(pathSegments, "bput")
	if segments, err := request.Path.build(); err != nil {
		return nil, err
	} else {
		pathSegments = append(pathSegments, segments...)
	}
	path := "/" + strings.Join(pathSegments, "/")
	var rawQuery string
	req := httpclient.Request{Method: "POST", ServiceNames: serviceNames, Path: path, RawQuery: rawQuery, UpToken: request.upToken, RequestBody: httpclient.GetRequestBodyFromReadSeekCloser(request.Body)}
	var queryer region.BucketRegionsQueryer
	if client.GetRegions() == nil && client.GetEndpoints() == nil {
		queryer = client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			var err error
			if request.overwrittenBucketHosts != nil {
				if bucketHosts, err = request.overwrittenBucketHosts.GetEndpoints(ctx); err != nil {
					return nil, err
				}
			}
			if queryer, err = region.NewBucketRegionsQueryer(bucketHosts, nil); err != nil {
				return nil, err
			}
		}
	}
	if queryer != nil {
		bucketName, err := request.getBucketName(ctx)
		if err != nil {
			return nil, err
		}
		accessKey, err := request.getAccessKey(ctx)
		if err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	var respBody ResponseBody
	if _, err := client.AcceptJson(ctx, &req, &respBody); err != nil {
		return nil, err
	}
	return &Response{Body: respBody}, nil
}

// 获取 API 所用的响应
type Response struct {
	Body ResponseBody
}
