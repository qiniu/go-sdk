// THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!

package apis

import (
	"context"
	"encoding/json"
	auth "github.com/qiniu/go-sdk/v7/auth"
	setbuckettaggings "github.com/qiniu/go-sdk/v7/storagev2/apis/set_bucket_taggings"
	errors "github.com/qiniu/go-sdk/v7/storagev2/errors"
	httpclient "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	region "github.com/qiniu/go-sdk/v7/storagev2/region"
	"net/url"
	"strings"
)

type innerSetBucketTaggingsRequest setbuckettaggings.Request

func (query *innerSetBucketTaggingsRequest) getBucketName(ctx context.Context) (string, error) {
	return query.Bucket, nil
}
func (query *innerSetBucketTaggingsRequest) buildQuery() (url.Values, error) {
	allQuery := make(url.Values)
	if query.Bucket != "" {
		allQuery.Set("bucket", query.Bucket)
	} else {
		return nil, errors.MissingRequiredFieldError{Name: "Bucket"}
	}
	return allQuery, nil
}
func (j *innerSetBucketTaggingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal((*setbuckettaggings.Request)(j))
}
func (j *innerSetBucketTaggingsRequest) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, (*setbuckettaggings.Request)(j))
}
func (request *innerSetBucketTaggingsRequest) getAccessKey(ctx context.Context) (string, error) {
	if request.Credentials != nil {
		if credentials, err := request.Credentials.Get(ctx); err != nil {
			return "", err
		} else {
			return credentials.AccessKey, nil
		}
	}
	return "", nil
}

type SetBucketTaggingsRequest = setbuckettaggings.Request
type SetBucketTaggingsResponse = setbuckettaggings.Response

// 设置存储空间的标签列表，包括新增和修改
func (storage *Storage) SetBucketTaggings(ctx context.Context, request *SetBucketTaggingsRequest, options *Options) (response *SetBucketTaggingsResponse, err error) {
	if options == nil {
		options = &Options{}
	}
	innerRequest := (*innerSetBucketTaggingsRequest)(request)
	serviceNames := []region.ServiceName{region.ServiceBucket}
	var pathSegments []string
	pathSegments = append(pathSegments, "bucketTagging")
	path := "/" + strings.Join(pathSegments, "/")
	var rawQuery string
	if query, err := innerRequest.buildQuery(); err != nil {
		return nil, err
	} else {
		rawQuery += query.Encode()
	}
	body, err := httpclient.GetJsonRequestBody(&innerRequest)
	if err != nil {
		return nil, err
	}
	req := httpclient.Request{Method: "PUT", ServiceNames: serviceNames, Path: path, RawQuery: rawQuery, AuthType: auth.TokenQiniu, Credentials: innerRequest.Credentials, RequestBody: body}
	var queryer region.BucketRegionsQueryer
	if storage.client.GetRegions() == nil && storage.client.GetEndpoints() == nil {
		queryer = storage.client.GetBucketQueryer()
		if queryer == nil {
			bucketHosts := httpclient.DefaultBucketHosts()
			if options.OverwrittenBucketHosts != nil {
				req.Endpoints = options.OverwrittenBucketHosts
			} else {
				req.Endpoints = bucketHosts
			}
		}
	}
	if queryer != nil {
		bucketName := options.OverwrittenBucketName
		var accessKey string
		var err error
		if bucketName == "" {
			if bucketName, err = innerRequest.getBucketName(ctx); err != nil {
				return nil, err
			}
		}
		if bucketName == "" {
			if upTokenProvider := storage.client.GetUpToken(); upTokenProvider != nil {
				if putPolicy, err := upTokenProvider.GetPutPolicy(ctx); err != nil {
					return nil, err
				} else if bucketName, err = putPolicy.GetBucketName(); err != nil {
					return nil, err
				}
			}
		}
		if accessKey, err = innerRequest.getAccessKey(ctx); err != nil {
			return nil, err
		}
		if accessKey == "" {
			if credentialsProvider := storage.client.GetCredentials(); credentialsProvider != nil {
				if creds, err := credentialsProvider.Get(ctx); err != nil {
					return nil, err
				} else if creds != nil {
					accessKey = creds.AccessKey
				}
			}
		}
		if accessKey == "" {
			if upTokenProvider := storage.client.GetUpToken(); upTokenProvider != nil {
				if accessKey, err = upTokenProvider.GetAccessKey(ctx); err != nil {
					return nil, err
				}
			}
		}
		if accessKey != "" && bucketName != "" {
			req.Region = queryer.Query(accessKey, bucketName)
		}
	}
	resp, err := storage.client.Do(ctx, &req)
	if err != nil {
		return nil, err
	}
	return &SetBucketTaggingsResponse{}, resp.Body.Close()
}
