package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"gopkg.in/yaml.v3"
)

const (
	PackageNameHTTPClient  = "github.com/qiniu/go-sdk/v7/storagev2/http_client"
	PackageNameAuth        = "github.com/qiniu/go-sdk/v7/auth"
	PackageNameCredentials = "github.com/qiniu/go-sdk/v7/storagev2/credentials"
	PackageNameRegion      = "github.com/qiniu/go-sdk/v7/storagev2/region"
	PackageNameUpToken     = "github.com/qiniu/go-sdk/v7/storagev2/uptoken"
	PackageNameErrors      = "github.com/qiniu/go-sdk/v7/storagev2/errors"
	PackageNameApis        = "github.com/qiniu/go-sdk/v7/storagev2/apis"
	PackageNameInternalIo  = "github.com/qiniu/go-sdk/v7/internal/io"
)

func main() {
	rootProjectPath, err := os.Getwd()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to get working directory: %s\n", err)
		os.Exit(1)
	}

	storageApiSpecsPath := filepath.Join(rootProjectPath, "..", "api-specs", "storage")
	storageGeneratedDirPath := filepath.Join(rootProjectPath, "apis")

	os.RemoveAll(storageGeneratedDirPath)

	storageApiSpecEntries, err := ioutil.ReadDir(storageApiSpecsPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to read directory %s: %s\n", storageApiSpecsPath, err)
		os.Exit(1)
	}

	for _, storageApiSpecEntry := range storageApiSpecEntries {
		apiSpecName := extractApiSpecName(storageApiSpecEntry.Name())
		apiSpecPath := filepath.Join(storageApiSpecsPath, storageApiSpecEntry.Name())
		generatedDirPath := filepath.Join(storageGeneratedDirPath, apiSpecName)
		if err = os.MkdirAll(generatedDirPath, 0755); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to create directory %s: %s\n", generatedDirPath, err)
			os.Exit(1)
		}
		if err = writeGolangPackages(apiSpecName, apiSpecPath, storageGeneratedDirPath); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to write go package %s: %s\n", apiSpecName, err)
			os.Exit(1)
		}
	}
	if err = writeApiClient(storageGeneratedDirPath); err != nil {
		fmt.Fprintf(os.Stderr, "Failed to write api client: %s\n", err)
		os.Exit(1)
	}
	if err = goBuildPackage("./apis/..."); err != nil {
		fmt.Fprintf(os.Stderr, "Failed to build go package ./apis/...: %s\n", err)
		os.Exit(1)
	}
}

func writeGolangPackages(apiSpecName, apiSpecPath, storageGeneratedDirPath string) (err error) {
	generatedDirPath := filepath.Join(storageGeneratedDirPath, apiSpecName)
	apiSpecFile, err := os.Open(apiSpecPath)
	if err != nil {
		return
	}
	defer apiSpecFile.Close()

	var apiSpec ApiDetailedDescription
	decoder := yaml.NewDecoder(apiSpecFile)
	decoder.KnownFields(true)
	if err = decoder.Decode(&apiSpec); err != nil {
		return
	}
	if err = apiSpecFile.Close(); err != nil {
		return
	}

	if err = writeSubPackage(apiSpecName, generatedDirPath, &apiSpec); err != nil {
		return
	}
	return writeApiPackage(apiSpecName, storageGeneratedDirPath, &apiSpec)
}

func writeSubPackage(apiSpecName, generatedDirPath string, apiSpec *ApiDetailedDescription) error {
	packageFile := jen.NewFile(apiSpecName)
	packageFile.HeaderComment("THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!")
	packageFile.PackageComment(apiSpec.Documentation)
	if err := apiSpec.generateSubPackages(packageFile.Group, CodeGeneratorOptions{
		Name:          apiSpecName,
		CamelCaseName: apiSpec.CamelCaseName,
		SnakeCaseName: apiSpec.SnakeCaseName,
		Documentation: apiSpec.Documentation,
	}); err != nil {
		return err
	}
	return packageFile.Save(filepath.Join(generatedDirPath, "api.go"))
}

func writeApiPackage(apiSpecName, storageGeneratedDirPath string, apiSpec *ApiDetailedDescription) error {
	apisPackageFile := jen.NewFile("apis")
	apisPackageFile.HeaderComment("THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!")
	if err := apiSpec.generatePackage(apisPackageFile.Group, CodeGeneratorOptions{
		Name:          apiSpecName,
		CamelCaseName: apiSpec.CamelCaseName,
		SnakeCaseName: apiSpec.SnakeCaseName,
		Documentation: apiSpec.Documentation,
	}); err != nil {
		return err
	}
	return apisPackageFile.Save(filepath.Join(storageGeneratedDirPath, "api_"+apiSpecName+".go"))
}

func goBuildPackage(packagePath string) error {
	cmd := exec.Command("go", "build", packagePath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}

func writeApiClient(storageGeneratedDirPath string) error {
	apiPackageFile := jen.NewFile("apis")
	apiPackageFile.HeaderComment("THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!")
	generateApiClient(apiPackageFile.Group)
	return apiPackageFile.Save(filepath.Join(storageGeneratedDirPath, "apis.go"))
}

func generateApiClient(group *jen.Group) {
	group.Add(jen.Comment("API 客户端"))
	group.Add(
		jen.Type().Id("Storage").StructFunc(func(group *jen.Group) {
			group.Add(jen.Id("client").Op("*").Qual(PackageNameHTTPClient, "Client"))
		}),
	)
	group.Add(jen.Comment("创建 API 客户端"))
	group.Add(
		jen.Func().
			Id("NewStorage").
			Params(jen.Id("options").Op("*").Qual(PackageNameHTTPClient, "Options")).
			Params(jen.Op("*").Id("Storage")).
			BlockFunc(func(group *jen.Group) {
				group.Return(jen.Op("&").Id("Storage").ValuesFunc(func(group *jen.Group) {
					group.Add(jen.Id("client").Op(":").Qual(PackageNameHTTPClient, "NewClient").Call(jen.Id("options")))
				}))
			}),
	)

	group.Add(jen.Comment("API 客户端选项"))
	group.Add(
		jen.Type().Id("Options").StructFunc(func(group *jen.Group) {
			group.Add(jen.Id("OverwrittenBucketHosts").Qual(PackageNameRegion, "EndpointsProvider"))
			group.Add(jen.Id("OverwrittenBucketName").String())
			group.Add(jen.Id("OverwrittenEndpoints").Qual(PackageNameRegion, "EndpointsProvider"))
			group.Add(jen.Id("OverwrittenRegion").Qual(PackageNameRegion, "RegionsProvider"))
		}),
	)
}
