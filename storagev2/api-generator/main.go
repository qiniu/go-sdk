package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"gopkg.in/yaml.v3"
)

const (
	PackageNameHttpClient = "github.com/qiniu/go-sdk/v7/storagev2/http_client"
)

func main() {
	rootProjectPath, err := os.Getwd()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to get working directory: %s\n", err)
		os.Exit(1)
	}

	storageApiSpecsPath := filepath.Join(rootProjectPath, "..", "api-specs", "storage")
	storageGeneratedDirPath := filepath.Join(rootProjectPath, "apis")

	os.RemoveAll(storageGeneratedDirPath)

	storageApiSpecEntries, err := ioutil.ReadDir(storageApiSpecsPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to read directory %s: %s\n", storageApiSpecsPath, err)
		os.Exit(1)
	}

	for _, storageApiSpecEntry := range storageApiSpecEntries {
		apiSpecName := extractApiSpecName(storageApiSpecEntry.Name())
		apiSpecPath := filepath.Join(storageApiSpecsPath, storageApiSpecEntry.Name())
		generatedDirPath := filepath.Join(storageGeneratedDirPath, apiSpecName)
		if err = os.MkdirAll(generatedDirPath, 0755); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to create directory %s: %s\n", generatedDirPath, err)
			os.Exit(1)
		}
		if err = writeGolangPackages(apiSpecName, apiSpecPath, generatedDirPath); err != nil {
			fmt.Fprintf(os.Stderr, "Failed to write go package %s: %s\n", apiSpecName, err)
			os.Exit(1)
		}
	}

	if err = goBuildPackage("./apis/..."); err != nil {
		fmt.Fprintf(os.Stderr, "Failed to build go package ./apis/...: %s\n", err)
		os.Exit(1)
	}
}

func writeGolangPackages(apiSpecName, apiSpecPath, generatedDirPath string) error {
	apiSpecFile, err := os.Open(apiSpecPath)
	if err != nil {
		return err
	}
	defer apiSpecFile.Close()

	var apiSpec ApiDetailedDescription
	decoder := yaml.NewDecoder(apiSpecFile)
	decoder.KnownFields(false)
	if err = decoder.Decode(&apiSpec); err != nil {
		return err
	}
	if err = apiSpecFile.Close(); err != nil {
		return err
	}

	newPackageFile := jen.NewFile(apiSpecName)
	newPackageFile.HeaderComment("THIS FILE IS GENERATED BY api-generator, DO NOT EDIT DIRECTLY!")
	newPackageFile.PackageComment(apiSpec.Documentation)
	if err = apiSpec.Generate(newPackageFile.Group, CodeGeneratorOptions{
		Name:          apiSpecName,
		Documentation: apiSpec.Documentation,
	}); err != nil {
		return err
	}
	return newPackageFile.Save(filepath.Join(generatedDirPath, "api.go"))
}

func goBuildPackage(packagePath string) error {
	cmd := exec.Command("go", "build", packagePath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}
